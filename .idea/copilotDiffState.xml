<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/TagsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/TagsActivity.java" />
              <option name="originalContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.EditableTagAdapter;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TagsActivity extends AppCompatActivity implements EditableTagAdapter.OnTagActionListener {&#10;&#10;    private RecyclerView recyclerViewTags;&#10;    private EditableTagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; tagsNota;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_tags);&#10;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Edición de Etiquetas&quot;);&#10;        }&#10;&#10;        recyclerViewTags = findViewById(R.id.recyclerViewTags);&#10;        recyclerViewTags.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        Intent intent = getIntent();&#10;        if (intent != null) {&#10;            ArrayList&lt;String&gt; tagsTexto = intent.getStringArrayListExtra(&quot;tags&quot;);&#10;            if (tagsTexto != null) {&#10;                tagsNota = new ArrayList&lt;&gt;();&#10;                for (String tagTexto : tagsTexto) {&#10;                    tagsNota.add(new Tag(tagTexto));&#10;                }&#10;                // CargarFavoritos&#10;                GenerarData.getInstance().loadFavorites(this);&#10;                setupRecyclerView();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        // GuardarFavoritos&#10;        GenerarData.getInstance().saveFavorites(this);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        tagAdapter = new EditableTagAdapter(this, tagsNota, this);&#10;        recyclerViewTags.setAdapter(tagAdapter);&#10;    }&#10;&#10;    @Override&#10;    public void onTagEdited(int position, String newText) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            tagsNota.get(position).setEtiquetaDescripcion(newText);&#10;            tagAdapter.notifyItemChanged(position);&#10;            Toast.makeText(this, &quot;Etiqueta actualizada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagDeleted(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            tagsNota.remove(position);&#10;            tagAdapter.notifyItemRemoved(position);&#10;            Toast.makeText(this, &quot;Etiqueta '&quot; + tagName + &quot;' eliminada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagAddedToFavorites(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            Toast.makeText(this, &quot;'&quot; + tagName + &quot;' añadida a favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        getOnBackPressedDispatcher().onBackPressed();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.EditableTagAdapter;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TagsActivity extends AppCompatActivity implements EditableTagAdapter.OnTagActionListener {&#10;&#10;    private RecyclerView recyclerViewTags;&#10;    private EditableTagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; tagsNota;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_tags);&#10;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Edición de Etiquetas&quot;);&#10;        }&#10;&#10;        recyclerViewTags = findViewById(R.id.recyclerViewTags);&#10;        recyclerViewTags.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        Intent intent = getIntent();&#10;        if (intent != null) {&#10;            ArrayList&lt;String&gt; tagsTexto = intent.getStringArrayListExtra(&quot;tags&quot;);&#10;            if (tagsTexto != null) {&#10;                tagsNota = new ArrayList&lt;&gt;();&#10;                for (String tagTexto : tagsTexto) {&#10;                    tagsNota.add(new Tag(tagTexto));&#10;                }&#10;                GenerarData.getInstance().loadFavorites(this);&#10;                setupRecyclerView();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        GenerarData.getInstance().saveFavorites(this);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        tagAdapter = new EditableTagAdapter(this, tagsNota, this);&#10;        recyclerViewTags.setAdapter(tagAdapter);&#10;    }&#10;&#10;    @Override&#10;    public void onTagEdited(int position, String newText) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            tagsNota.get(position).setEtiquetaDescripcion(newText);&#10;            tagAdapter.notifyItemChanged(position);&#10;            Toast.makeText(this, &quot;Etiqueta actualizada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagDeleted(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            tagsNota.remove(position);&#10;            tagAdapter.notifyItemRemoved(position);&#10;            Toast.makeText(this, &quot;Etiqueta '&quot; + tagName + &quot;' eliminada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagAddedToFavorites(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            Toast.makeText(this, &quot;'&quot; + tagName + &quot;' añadida a favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        getOnBackPressedDispatcher().onBackPressed();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/adapters/EditableTagAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/adapters/EditableTagAdapter.java" />
              <option name="originalContent" value="package com.sgionotes.adapters;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.PopupWindow;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.Tag;&#10;import java.util.List;&#10;&#10;public class EditableTagAdapter extends RecyclerView.Adapter&lt;EditableTagAdapter.TagViewHolder&gt; {&#10;&#10;    private final List&lt;Tag&gt; tags;&#10;    private final Context context;&#10;    private final OnTagActionListener listener;&#10;&#10;    public interface OnTagActionListener {&#10;        void onTagEdited(int position, String newText);&#10;        void onTagDeleted(int position);&#10;        void onTagAddedToFavorites(int position);&#10;    }&#10;&#10;    public EditableTagAdapter(Context context, List&lt;Tag&gt; tags, OnTagActionListener listener) {&#10;        this.context = context;&#10;        this.tags = tags;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public TagViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_tag_editable, parent, false);&#10;        return new TagViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull TagViewHolder holder, int position) {&#10;        Tag tag = tags.get(position);&#10;        holder.etTagText.setText(tag.getDisplayText());&#10;&#10;        // VerificacionDeFavorito&#10;        if (tag.isFavorite()) {&#10;            holder.ivTagIcon.setVisibility(View.GONE);&#10;            holder.ivFavoriteIcon.setVisibility(View.VISIBLE);&#10;        } else {&#10;            holder.ivTagIcon.setVisibility(View.VISIBLE);&#10;            holder.ivFavoriteIcon.setVisibility(View.GONE);&#10;        }&#10;&#10;        holder.btnMore.setOnClickListener(v -&gt; showPopupMenu(v, position));&#10;&#10;        holder.etTagText.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                finishEditing(holder, position);&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        holder.etTagText.setOnFocusChangeListener((v, hasFocus) -&gt; {&#10;            if (!hasFocus) {&#10;                finishEditing(holder, position);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return tags.size();&#10;    }&#10;&#10;    private void showPopupMenu(View anchor, int position) {&#10;        View popupView = LayoutInflater.from(context).inflate(R.layout.popup_menu_tag, anchor.findViewById(android.R.id.content), false);&#10;&#10;        PopupWindow popupWindow = new PopupWindow(popupView,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT, true);&#10;&#10;        LinearLayout menuAddFavorite = popupView.findViewById(R.id.menuAddFavorite);&#10;        LinearLayout menuEdit = popupView.findViewById(R.id.menuEdit);&#10;        LinearLayout menuDelete = popupView.findViewById(R.id.menuDelete);&#10;&#10;        Tag currentTag = tags.get(position);&#10;        TextView favoriteText = (TextView) ((LinearLayout) menuAddFavorite).getChildAt(1);&#10;        if (currentTag.isFavorite()) {&#10;            favoriteText.setText(&quot;Quitar de favoritas&quot;);&#10;        } else {&#10;            favoriteText.setText(&quot;Añadir a favoritas&quot;);&#10;        }&#10;&#10;        menuAddFavorite.setOnClickListener(v -&gt; {&#10;            if (currentTag.isFavorite()) {&#10;                currentTag.setFavorite(false);&#10;            } else {&#10;                currentTag.setFavorite(true);&#10;            }&#10;            if (listener != null) {&#10;                listener.onTagAddedToFavorites(position);&#10;            }&#10;            sortTags();&#10;            notifyDataSetChanged();&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuEdit.setOnClickListener(v -&gt; {&#10;            enableEditing(position);&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuDelete.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onTagDeleted(position);&#10;            }&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        popupWindow.showAsDropDown(anchor, -100, 0);&#10;    }&#10;&#10;    private void enableEditing(int position) {&#10;        notifyItemChanged(position);&#10;        android.os.Handler handler = new android.os.Handler();&#10;        handler.postDelayed(() -&gt; {&#10;            RecyclerView.ViewHolder viewHolder = ((RecyclerView) ((android.app.Activity) context).findViewById(R.id.recyclerViewTags))&#10;                    .findViewHolderForAdapterPosition(position);&#10;            if (viewHolder instanceof TagViewHolder) {&#10;                TagViewHolder holder = (TagViewHolder) viewHolder;&#10;                holder.etTagText.setFocusable(true);&#10;                holder.etTagText.setFocusableInTouchMode(true);&#10;                holder.etTagText.requestFocus();&#10;                holder.etTagText.selectAll();&#10;&#10;                InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;                imm.showSoftInput(holder.etTagText, InputMethodManager.SHOW_IMPLICIT);&#10;            }&#10;        }, 100);&#10;    }&#10;&#10;    private void finishEditing(TagViewHolder holder, int position) {&#10;        String newText = holder.etTagText.getText().toString().trim();&#10;        if (!newText.isEmpty() &amp;&amp; listener != null) {&#10;            listener.onTagEdited(position, newText);&#10;        }&#10;&#10;        holder.etTagText.setFocusable(false);&#10;        holder.etTagText.setFocusableInTouchMode(false);&#10;        holder.etTagText.clearFocus();&#10;&#10;        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;        imm.hideSoftInputFromWindow(holder.etTagText.getWindowToken(), 0);&#10;    }&#10;&#10;    private void sortTags() {&#10;        tags.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    public static class TagViewHolder extends RecyclerView.ViewHolder {&#10;        EditText etTagText;&#10;        ImageButton btnMore;&#10;        ImageView ivFavoriteIcon;&#10;        ImageView ivTagIcon;&#10;&#10;        public TagViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            etTagText = itemView.findViewById(R.id.etTagText);&#10;            btnMore = itemView.findViewById(R.id.btnMore);&#10;            ivFavoriteIcon = itemView.findViewById(R.id.ivFavoriteIcon);&#10;            ivTagIcon = itemView.findViewById(R.id.ivTagIcon);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.adapters;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.PopupWindow;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.Tag;&#10;import java.util.List;&#10;&#10;public class EditableTagAdapter extends RecyclerView.Adapter&lt;EditableTagAdapter.TagViewHolder&gt; {&#10;&#10;    private final List&lt;Tag&gt; tags;&#10;    private final Context context;&#10;    private final OnTagActionListener listener;&#10;&#10;    public interface OnTagActionListener {&#10;        void onTagEdited(int position, String newText);&#10;        void onTagDeleted(int position);&#10;        void onTagAddedToFavorites(int position);&#10;    }&#10;&#10;    public EditableTagAdapter(Context context, List&lt;Tag&gt; tags, OnTagActionListener listener) {&#10;        this.context = context;&#10;        this.tags = tags;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public TagViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_tag_editable, parent, false);&#10;        return new TagViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull TagViewHolder holder, int position) {&#10;        Tag tag = tags.get(position);&#10;        holder.etTagText.setText(tag.getDisplayText());&#10;&#10;        // VerificacionDeFavorito&#10;        if (tag.isFavorite()) {&#10;            holder.ivTagIcon.setVisibility(View.GONE);&#10;            holder.ivFavoriteIcon.setVisibility(View.VISIBLE);&#10;        } else {&#10;            holder.ivTagIcon.setVisibility(View.VISIBLE);&#10;            holder.ivFavoriteIcon.setVisibility(View.GONE);&#10;        }&#10;&#10;        holder.btnMore.setOnClickListener(v -&gt; showPopupMenu(v, position));&#10;&#10;        holder.etTagText.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                finishEditing(holder, position);&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        holder.etTagText.setOnFocusChangeListener((v, hasFocus) -&gt; {&#10;            if (!hasFocus) {&#10;                finishEditing(holder, position);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return tags.size();&#10;    }&#10;&#10;    private void showPopupMenu(View anchor, int position) {&#10;        View popupView = LayoutInflater.from(context).inflate(R.layout.popup_menu_tag, null, false);&#10;&#10;        // Medir el popup antes de mostrarlo&#10;        popupView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);&#10;        int popupWidth = popupView.getMeasuredWidth();&#10;&#10;        PopupWindow popupWindow = new PopupWindow(popupView,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT, true);&#10;&#10;        LinearLayout menuAddFavorite = popupView.findViewById(R.id.menuAddFavorite);&#10;        LinearLayout menuEdit = popupView.findViewById(R.id.menuEdit);&#10;        LinearLayout menuDelete = popupView.findViewById(R.id.menuDelete);&#10;&#10;        Tag currentTag = tags.get(position);&#10;        TextView favoriteText = (TextView) ((LinearLayout) menuAddFavorite).getChildAt(1);&#10;        if (currentTag.isFavorite()) {&#10;            favoriteText.setText(&quot;Quitar de favoritas&quot;);&#10;        } else {&#10;            favoriteText.setText(&quot;Añadir a favoritas&quot;);&#10;        }&#10;&#10;        menuAddFavorite.setOnClickListener(v -&gt; {&#10;            if (currentTag.isFavorite()) {&#10;                currentTag.setFavorite(false);&#10;            } else {&#10;                currentTag.setFavorite(true);&#10;            }&#10;            if (listener != null) {&#10;                listener.onTagAddedToFavorites(position);&#10;            }&#10;            sortTags();&#10;            notifyDataSetChanged();&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuEdit.setOnClickListener(v -&gt; {&#10;            enableEditing(position);&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuDelete.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onTagDeleted(position);&#10;            }&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        // Calcular posición para alinear el borde derecho del popup con el borde derecho del botón&#10;        int xOffset = anchor.getWidth() - popupWidth;&#10;        popupWindow.showAsDropDown(anchor, xOffset, 0);&#10;    }&#10;&#10;    private void enableEditing(int position) {&#10;        notifyItemChanged(position);&#10;        android.os.Handler handler = new android.os.Handler();&#10;        handler.postDelayed(() -&gt; {&#10;            RecyclerView.ViewHolder viewHolder = ((RecyclerView) ((android.app.Activity) context).findViewById(R.id.recyclerViewTags))&#10;                    .findViewHolderForAdapterPosition(position);&#10;            if (viewHolder instanceof TagViewHolder) {&#10;                TagViewHolder holder = (TagViewHolder) viewHolder;&#10;                holder.etTagText.setFocusable(true);&#10;                holder.etTagText.setFocusableInTouchMode(true);&#10;                holder.etTagText.requestFocus();&#10;                holder.etTagText.selectAll();&#10;&#10;                InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;                imm.showSoftInput(holder.etTagText, InputMethodManager.SHOW_IMPLICIT);&#10;            }&#10;        }, 100);&#10;    }&#10;&#10;    private void finishEditing(TagViewHolder holder, int position) {&#10;        String newText = holder.etTagText.getText().toString().trim();&#10;        if (!newText.isEmpty() &amp;&amp; listener != null) {&#10;            listener.onTagEdited(position, newText);&#10;        }&#10;&#10;        holder.etTagText.setFocusable(false);&#10;        holder.etTagText.setFocusableInTouchMode(false);&#10;        holder.etTagText.clearFocus();&#10;&#10;        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;        imm.hideSoftInputFromWindow(holder.etTagText.getWindowToken(), 0);&#10;    }&#10;&#10;    private void sortTags() {&#10;        tags.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    public static class TagViewHolder extends RecyclerView.ViewHolder {&#10;        EditText etTagText;&#10;        ImageButton btnMore;&#10;        ImageView ivFavoriteIcon;&#10;        ImageView ivTagIcon;&#10;&#10;        public TagViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            etTagText = itemView.findViewById(R.id.etTagText);&#10;            btnMore = itemView.findViewById(R.id.btnMore);&#10;            ivFavoriteIcon = itemView.findViewById(R.id.ivFavoriteIcon);&#10;            ivTagIcon = itemView.findViewById(R.id.ivTagIcon);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/adapters/TagAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/adapters/TagAdapter.java" />
              <option name="originalContent" value="package com.sgionotes.adapters;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.PopupWindow;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;import java.util.List;&#10;&#10;public class TagAdapter extends RecyclerView.Adapter&lt;TagAdapter.TagViewHolder&gt; {&#10;&#10;    private List&lt;Tag&gt; listaTags;&#10;    private Context context;&#10;&#10;    public TagAdapter(List&lt;Tag&gt; listaTags) {&#10;        this.listaTags = listaTags;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public TagViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        context = parent.getContext();&#10;        View view = LayoutInflater.from(context)&#10;                .inflate(R.layout.item_tag_editable, parent, false);&#10;        return new TagViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull TagViewHolder holder, int position) {&#10;        Tag tag = listaTags.get(position);&#10;        holder.etTagText.setText(tag.getDisplayText());&#10;&#10;        // VerificacionDeFavorito&#10;        if (tag.isFavorite()) {&#10;            holder.ivTagIcon.setVisibility(View.GONE);&#10;            holder.ivFavoriteIcon.setVisibility(View.VISIBLE);&#10;        } else {&#10;            holder.ivTagIcon.setVisibility(View.VISIBLE);&#10;            holder.ivFavoriteIcon.setVisibility(View.GONE);&#10;        }&#10;&#10;        holder.btnMore.setOnClickListener(v -&gt; showPopupMenu(v, position));&#10;&#10;        holder.etTagText.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                finishEditing(holder, position);&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        holder.etTagText.setOnFocusChangeListener((v, hasFocus) -&gt; {&#10;            if (!hasFocus) {&#10;                finishEditing(holder, position);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return listaTags.size();&#10;    }&#10;&#10;    private void showPopupMenu(View anchor, int position) {&#10;        View popupView = LayoutInflater.from(context).inflate(R.layout.popup_menu_tag, null, false);&#10;&#10;        // PopupMedir&#10;        popupView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);&#10;        int popupWidth = popupView.getMeasuredWidth();&#10;&#10;        PopupWindow popupWindow = new PopupWindow(popupView,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT, true);&#10;&#10;        LinearLayout menuAddFavorite = popupView.findViewById(R.id.menuAddFavorite);&#10;        LinearLayout menuEdit = popupView.findViewById(R.id.menuEdit);&#10;        LinearLayout menuDelete = popupView.findViewById(R.id.menuDelete);&#10;&#10;        Tag currentTag = listaTags.get(position);&#10;        TextView favoriteText = menuAddFavorite.findViewById(android.R.id.text1);&#10;        if (favoriteText == null) {&#10;            favoriteText = (TextView) ((LinearLayout) menuAddFavorite).getChildAt(1);&#10;        }&#10;        if (currentTag.isFavorite()) {&#10;            favoriteText.setText(&quot;Quitar de favoritas&quot;);&#10;        } else {&#10;            favoriteText.setText(&quot;Añadir a favoritas&quot;);&#10;        }&#10;&#10;        menuAddFavorite.setOnClickListener(v -&gt; {&#10;            String tagName = currentTag.getEtiquetaDescripcion();&#10;            if (currentTag.isFavorite()) {&#10;                currentTag.setFavorite(false);&#10;                Toast.makeText(context, &quot;'&quot; + tagName + &quot;' quitada de favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                currentTag.setFavorite(true);&#10;                Toast.makeText(context, &quot;'&quot; + tagName + &quot;' añadida a favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;            // Guardar favoritos inmediatamente&#10;            GenerarData.getInstance().saveFavorites(context);&#10;            sortTags();&#10;            notifyDataSetChanged();&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuEdit.setOnClickListener(v -&gt; {&#10;            enableEditing(position);&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuDelete.setOnClickListener(v -&gt; {&#10;            String tagName = currentTag.getEtiquetaDescripcion();&#10;            listaTags.remove(position);&#10;            notifyItemRemoved(position);&#10;            // Guardar todas las etiquetas después de eliminar&#10;            GenerarData.getInstance().saveAllTags(context);&#10;            Toast.makeText(context, &quot;Etiqueta '&quot; + tagName + &quot;' eliminada&quot;, Toast.LENGTH_SHORT).show();&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        // Calcular posición para alinear el borde derecho del popup con el borde derecho del botón&#10;        int xOffset = anchor.getWidth() - popupWidth;&#10;        popupWindow.showAsDropDown(anchor, xOffset, 0);&#10;    }&#10;&#10;    private void sortTags() {&#10;        listaTags.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void enableEditing(int position) {&#10;        notifyItemChanged(position);&#10;        android.os.Handler handler = new android.os.Handler();&#10;        handler.postDelayed(() -&gt; {&#10;            RecyclerView recyclerView = (RecyclerView) ((android.app.Activity) context).findViewById(R.id.recyclerTags);&#10;            if (recyclerView != null) {&#10;                RecyclerView.ViewHolder viewHolder = recyclerView.findViewHolderForAdapterPosition(position);&#10;                if (viewHolder instanceof TagViewHolder) {&#10;                    TagViewHolder holder = (TagViewHolder) viewHolder;&#10;                    holder.etTagText.setFocusable(true);&#10;                    holder.etTagText.setFocusableInTouchMode(true);&#10;                    holder.etTagText.requestFocus();&#10;                    holder.etTagText.selectAll();&#10;&#10;                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;                    imm.showSoftInput(holder.etTagText, InputMethodManager.SHOW_IMPLICIT);&#10;                }&#10;            }&#10;        }, 100);&#10;    }&#10;&#10;    private void finishEditing(TagViewHolder holder, int position) {&#10;        String newText = holder.etTagText.getText().toString().trim();&#10;        if (!newText.isEmpty()) {&#10;            listaTags.get(position).setEtiquetaDescripcion(newText);&#10;            Toast.makeText(context, &quot;Etiqueta actualizada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        holder.etTagText.setFocusable(false);&#10;        holder.etTagText.setFocusableInTouchMode(false);&#10;        holder.etTagText.clearFocus();&#10;&#10;        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;        imm.hideSoftInputFromWindow(holder.etTagText.getWindowToken(), 0);&#10;    }&#10;&#10;    public static class TagViewHolder extends RecyclerView.ViewHolder {&#10;        EditText etTagText;&#10;        ImageButton btnMore;&#10;        ImageView ivFavoriteIcon; // IconoDeFavorito&#10;        ImageView ivTagIcon; // IconoDeEtiqueta&#10;&#10;        public TagViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            etTagText = itemView.findViewById(R.id.etTagText);&#10;            btnMore = itemView.findViewById(R.id.btnMore);&#10;            ivFavoriteIcon = itemView.findViewById(R.id.ivFavoriteIcon); // Iicono de favorito&#10;            ivTagIcon = itemView.findViewById(R.id.ivTagIcon); // Icono de etiqueta&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.adapters;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.PopupWindow;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;import java.util.List;&#10;&#10;public class TagAdapter extends RecyclerView.Adapter&lt;TagAdapter.TagViewHolder&gt; {&#10;&#10;    private List&lt;Tag&gt; listaTags;&#10;    private Context context;&#10;&#10;    public TagAdapter(List&lt;Tag&gt; listaTags) {&#10;        this.listaTags = listaTags;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public TagViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        context = parent.getContext();&#10;        View view = LayoutInflater.from(context)&#10;                .inflate(R.layout.item_tag_editable, parent, false);&#10;        return new TagViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull TagViewHolder holder, int position) {&#10;        Tag tag = listaTags.get(position);&#10;        holder.etTagText.setText(tag.getDisplayText());&#10;&#10;        // VerificacionDeFavorito&#10;        if (tag.isFavorite()) {&#10;            holder.ivTagIcon.setVisibility(View.GONE);&#10;            holder.ivFavoriteIcon.setVisibility(View.VISIBLE);&#10;        } else {&#10;            holder.ivTagIcon.setVisibility(View.VISIBLE);&#10;            holder.ivFavoriteIcon.setVisibility(View.GONE);&#10;        }&#10;&#10;        holder.btnMore.setOnClickListener(v -&gt; showPopupMenu(v, position));&#10;&#10;        holder.etTagText.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                finishEditing(holder, position);&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        holder.etTagText.setOnFocusChangeListener((v, hasFocus) -&gt; {&#10;            if (!hasFocus) {&#10;                finishEditing(holder, position);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return listaTags.size();&#10;    }&#10;&#10;    private void showPopupMenu(View anchor, int position) {&#10;        View popupView = LayoutInflater.from(context).inflate(R.layout.popup_menu_tag, null, false);&#10;&#10;        // PopupMedir&#10;        popupView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);&#10;        int popupWidth = popupView.getMeasuredWidth();&#10;&#10;        PopupWindow popupWindow = new PopupWindow(popupView,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT, true);&#10;&#10;        LinearLayout menuAddFavorite = popupView.findViewById(R.id.menuAddFavorite);&#10;        LinearLayout menuEdit = popupView.findViewById(R.id.menuEdit);&#10;        LinearLayout menuDelete = popupView.findViewById(R.id.menuDelete);&#10;&#10;        Tag currentTag = listaTags.get(position);&#10;        TextView favoriteText = menuAddFavorite.findViewById(android.R.id.text1);&#10;        if (favoriteText == null) {&#10;            favoriteText = (TextView) ((LinearLayout) menuAddFavorite).getChildAt(1);&#10;        }&#10;        if (currentTag.isFavorite()) {&#10;            favoriteText.setText(&quot;Quitar de favoritas&quot;);&#10;        } else {&#10;            favoriteText.setText(&quot;Añadir a favoritas&quot;);&#10;        }&#10;&#10;        menuAddFavorite.setOnClickListener(v -&gt; {&#10;            String tagName = currentTag.getEtiquetaDescripcion();&#10;            if (currentTag.isFavorite()) {&#10;                currentTag.setFavorite(false);&#10;                Toast.makeText(context, &quot;'&quot; + tagName + &quot;' quitada de favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                currentTag.setFavorite(true);&#10;                Toast.makeText(context, &quot;'&quot; + tagName + &quot;' añadida a favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;            // Guardar favoritos inmediatamente&#10;            GenerarData.getInstance().saveFavorites(context);&#10;            sortTags();&#10;            notifyDataSetChanged();&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuEdit.setOnClickListener(v -&gt; {&#10;            enableEditing(position);&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        menuDelete.setOnClickListener(v -&gt; {&#10;            String tagName = currentTag.getEtiquetaDescripcion();&#10;            listaTags.remove(position);&#10;            notifyItemRemoved(position);&#10;            Toast.makeText(context, &quot;Etiqueta '&quot; + tagName + &quot;' eliminada&quot;, Toast.LENGTH_SHORT).show();&#10;            popupWindow.dismiss();&#10;        });&#10;&#10;        // Calcular posición para alinear el borde derecho del popup con el borde derecho del botón&#10;        int xOffset = anchor.getWidth() - popupWidth;&#10;        popupWindow.showAsDropDown(anchor, xOffset, 0);&#10;    }&#10;&#10;    private void sortTags() {&#10;        listaTags.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void enableEditing(int position) {&#10;        notifyItemChanged(position);&#10;        android.os.Handler handler = new android.os.Handler();&#10;        handler.postDelayed(() -&gt; {&#10;            RecyclerView recyclerView = (RecyclerView) ((android.app.Activity) context).findViewById(R.id.recyclerTags);&#10;            if (recyclerView != null) {&#10;                RecyclerView.ViewHolder viewHolder = recyclerView.findViewHolderForAdapterPosition(position);&#10;                if (viewHolder instanceof TagViewHolder) {&#10;                    TagViewHolder holder = (TagViewHolder) viewHolder;&#10;                    holder.etTagText.setFocusable(true);&#10;                    holder.etTagText.setFocusableInTouchMode(true);&#10;                    holder.etTagText.requestFocus();&#10;                    holder.etTagText.selectAll();&#10;&#10;                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;                    imm.showSoftInput(holder.etTagText, InputMethodManager.SHOW_IMPLICIT);&#10;                }&#10;            }&#10;        }, 100);&#10;    }&#10;&#10;    private void finishEditing(TagViewHolder holder, int position) {&#10;        String newText = holder.etTagText.getText().toString().trim();&#10;        if (!newText.isEmpty()) {&#10;            listaTags.get(position).setEtiquetaDescripcion(newText);&#10;            Toast.makeText(context, &quot;Etiqueta actualizada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        holder.etTagText.setFocusable(false);&#10;        holder.etTagText.setFocusableInTouchMode(false);&#10;        holder.etTagText.clearFocus();&#10;&#10;        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;        imm.hideSoftInputFromWindow(holder.etTagText.getWindowToken(), 0);&#10;    }&#10;&#10;    public static class TagViewHolder extends RecyclerView.ViewHolder {&#10;        EditText etTagText;&#10;        ImageButton btnMore;&#10;        ImageView ivFavoriteIcon; // IconoDeFavorito&#10;        ImageView ivTagIcon; // IconoDeEtiqueta&#10;&#10;        public TagViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            etTagText = itemView.findViewById(R.id.etTagText);&#10;            btnMore = itemView.findViewById(R.id.btnMore);&#10;            ivFavoriteIcon = itemView.findViewById(R.id.ivFavoriteIcon); // Iicono de favorito&#10;            ivTagIcon = itemView.findViewById(R.id.ivTagIcon); // Icono de etiqueta&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/fragments/TagFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/fragments/TagFragment.java" />
              <option name="originalContent" value="package com.sgionotes.fragments;&#10;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.TagAdapter;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Tag;&#10;import java.util.List;&#10;&#10;public class TagFragment extends Fragment {&#10;&#10;    private RecyclerView recyclerTags;&#10;    private TagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private EditText txtTagNew;&#10;    private ImageView btnAddTag;&#10;&#10;    public TagFragment() {&#10;        listaEtiquetas = GenerarData.getInstance().getListaEtiquetas();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;&#10;        View vista = inflater.inflate(R.layout.fragment_tag, container, false);&#10;&#10;        recyclerTags = vista.findViewById(R.id.recyclerTags);&#10;        txtTagNew = vista.findViewById(R.id.txtTagNew);&#10;        btnAddTag = vista.findViewById(R.id.btnAddTag);&#10;&#10;        // CargaFavoritos&#10;        GenerarData.getInstance().loadFavorites(getContext());&#10;&#10;        recyclerTags.setLayoutManager(&#10;                new LinearLayoutManager(getContext())&#10;        );&#10;&#10;        btnAddTag.setOnClickListener(v -&gt; agregarEtiqueta());&#10;&#10;        txtTagNew.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_SEND) {&#10;                agregarEtiqueta();&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        tagAdapter = new TagAdapter(listaEtiquetas);&#10;        recyclerTags.setAdapter(tagAdapter);&#10;&#10;        return vista;&#10;&#10;    }&#10;&#10;    private void agregarEtiqueta() {&#10;        String texto = txtTagNew.getText().toString().trim();&#10;        if (!texto.isEmpty()) {&#10;            Tag nueva = new Tag(texto);&#10;            listaEtiquetas.add(0, nueva);&#10;            tagAdapter.notifyItemInserted(0);&#10;            recyclerTags.scrollToPosition(0);&#10;            txtTagNew.setText(&quot;&quot;);&#10;&#10;            // GuardarInmediatamenteetiquetas&#10;            GenerarData.getInstance().saveAllTags(getContext());&#10;&#10;            txtTagNew.clearFocus();&#10;            InputMethodManager imm = (InputMethodManager) requireContext().getSystemService(Context.INPUT_METHOD_SERVICE);&#10;            imm.hideSoftInputFromWindow(txtTagNew.getWindowToken(), 0);&#10;        } else {&#10;            Snackbar.make(recyclerTags, &quot;La etiqueta no puede estar vacía&quot;, Snackbar.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onPause() {&#10;        super.onPause();&#10;        // GuardarEtiquetasAutomaticamente&#10;        GenerarData.getInstance().saveAllTags(getContext());&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sgionotes.fragments;&#10;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.TagAdapter;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Tag;&#10;import java.util.List;&#10;&#10;public class TagFragment extends Fragment {&#10;&#10;    private RecyclerView recyclerTags;&#10;    private TagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private EditText txtTagNew;&#10;    private ImageView btnAddTag;&#10;&#10;    public TagFragment() {&#10;        listaEtiquetas = GenerarData.getInstance().getListaEtiquetas();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;&#10;        View vista = inflater.inflate(R.layout.fragment_tag, container, false);&#10;&#10;        recyclerTags = vista.findViewById(R.id.recyclerTags);&#10;        txtTagNew = vista.findViewById(R.id.txtTagNew);&#10;        btnAddTag = vista.findViewById(R.id.btnAddTag);&#10;&#10;        // CargaFavoritos&#10;        GenerarData.getInstance().loadFavorites(getContext());&#10;&#10;        recyclerTags.setLayoutManager(&#10;                new LinearLayoutManager(getContext())&#10;        );&#10;&#10;        btnAddTag.setOnClickListener(v -&gt; agregarEtiqueta());&#10;&#10;        txtTagNew.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_SEND) {&#10;                agregarEtiqueta();&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        tagAdapter = new TagAdapter(listaEtiquetas);&#10;        recyclerTags.setAdapter(tagAdapter);&#10;&#10;        return vista;&#10;&#10;    }&#10;&#10;    private void agregarEtiqueta() {&#10;        String texto = txtTagNew.getText().toString().trim();&#10;        if (!texto.isEmpty()) {&#10;            Tag nueva = new Tag(texto);&#10;            listaEtiquetas.add(0, nueva);&#10;            tagAdapter.notifyItemInserted(0);&#10;            recyclerTags.scrollToPosition(0);&#10;            txtTagNew.setText(&quot;&quot;);&#10;&#10;            txtTagNew.clearFocus();&#10;            InputMethodManager imm = (InputMethodManager) requireContext().getSystemService(Context.INPUT_METHOD_SERVICE);&#10;            imm.hideSoftInputFromWindow(txtTagNew.getWindowToken(), 0);&#10;        } else {&#10;            Snackbar.make(recyclerTags, &quot;La etiqueta no puede estar vacía&quot;, Snackbar.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onPause() {&#10;        super.onPause();&#10;        GenerarData.getInstance().saveFavorites(getContext());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/GenerarData.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/GenerarData.java" />
              <option name="originalContent" value="package com.sgionotes.models;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Set;&#10;import java.util.HashSet;&#10;&#10;public class GenerarData {&#10;&#10;    private static GenerarData instancia;&#10;    private List&lt;Note&gt; listaNotas;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private static final String PREFS_NAME = &quot;TagPreferences&quot;;&#10;    private static final String FAVORITES_KEY = &quot;favorites&quot;;&#10;    private static final String TIMESTAMPS_KEY = &quot;timestamps&quot;;&#10;    private static final String TAGS_KEY = &quot;all_tags&quot;;&#10;    private static final String TAG_SEPARATOR = &quot;||TAG_SEPARATOR||&quot;;&#10;&#10;    private GenerarData() {&#10;&#10;        listaNotas = new ArrayList&lt;&gt;();&#10;        listaEtiquetas = new ArrayList&lt;&gt;();&#10;&#10;        Tag tagTrabajo = new Tag(&quot;Trabajo&quot;);&#10;        Tag tagPersonal = new Tag(&quot;Personal&quot;);&#10;        Tag tagImportante = new Tag(&quot;Importante&quot;);&#10;        Tag tagIdeas = new Tag(&quot;Ideas&quot;);&#10;        Tag tagUrgente = new Tag(&quot;Urgente&quot;);&#10;&#10;        listaEtiquetas.add(tagTrabajo);&#10;        listaEtiquetas.add(tagPersonal);&#10;        listaEtiquetas.add(tagImportante);&#10;        listaEtiquetas.add(tagIdeas);&#10;        listaEtiquetas.add(tagUrgente);&#10;&#10;        listaNotas.add(new Note(1,&#10;                &quot;Lista de compras&quot;,&#10;                &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                Arrays.asList(tagPersonal),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(2,&#10;                &quot;Idea para proyecto&quot;,&#10;                &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                Arrays.asList(tagIdeas, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(3,&#10;                &quot;Cita médica&quot;,&#10;                &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                Arrays.asList(tagPersonal, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(4,&#10;                &quot;Plan de marketing&quot;,&#10;                &quot;Definir objetivos trimestrales, estudiar la competencia y proponer campañas.&quot;,&#10;                Arrays.asList(tagTrabajo),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(5,&#10;                &quot;Reunión con cliente&quot;,&#10;                &quot;No olvidar preparar la presentación y enviarla por correo antes del viernes.&quot;,&#10;                Arrays.asList(tagTrabajo, tagUrgente),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(6,&#10;                &quot;Lista de compras&quot;,&#10;                &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                Arrays.asList(tagPersonal),&#10;                true, true&#10;        ));&#10;        listaNotas.add(new Note(7,&#10;                &quot;Idea para proyecto&quot;,&#10;                &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                Arrays.asList(tagIdeas, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(8,&#10;                &quot;Cita médica&quot;,&#10;                &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                Arrays.asList(tagPersonal, tagImportante),&#10;                true, true&#10;        ));&#10;&#10;        listaNotas.add(new Note(9,&#10;                &quot;Plan de marketing&quot;,&#10;                &quot;Definir objetivos trimestrales, estudiar la competencia y proponer campañas.&quot;,&#10;                Arrays.asList(tagTrabajo),&#10;                true, true&#10;        ));&#10;&#10;    }&#10;&#10;    public List&lt;Note&gt; getListaNotas() {&#10;        return listaNotas;&#10;    }&#10;&#10;    public void setListaNotas(List&lt;Note&gt; listaNotas) {&#10;        this.listaNotas = listaNotas;&#10;    }&#10;&#10;    public List&lt;Tag&gt; getListaEtiquetas() {&#10;        return listaEtiquetas;&#10;    }&#10;&#10;    public void setListaEtiquetas(List&lt;Tag&gt; listaEtiquetas) {&#10;        this.listaEtiquetas = listaEtiquetas;&#10;    }&#10;&#10;    public static GenerarData getInstance() {&#10;        if (instancia == null) {&#10;            instancia = new GenerarData();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public void loadFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        Set&lt;String&gt; favorites = prefs.getStringSet(FAVORITES_KEY, new HashSet&lt;&gt;());&#10;        &#10;        for (Tag tag : listaEtiquetas) {&#10;            String tagKey = tag.getEtiquetaDescripcion();&#10;            if (favorites.contains(tagKey)) {&#10;                long timestamp = prefs.getLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, System.currentTimeMillis());&#10;                tag.setFavorite(true);&#10;                tag.setFavoriteTimestamp(timestamp);&#10;            }&#10;        }&#10;        &#10;        sortTagsByFavorites();&#10;    }&#10;&#10;    public void saveAllTags(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;&#10;        // Guardar todas las etiquetas&#10;        StringBuilder tagsBuilder = new StringBuilder();&#10;        for (int i = 0; i &lt; listaEtiquetas.size(); i++) {&#10;            if (i &gt; 0) {&#10;                tagsBuilder.append(TAG_SEPARATOR);&#10;            }&#10;            tagsBuilder.append(listaEtiquetas.get(i).getEtiquetaDescripcion());&#10;        }&#10;&#10;        editor.putString(TAGS_KEY, tagsBuilder.toString());&#10;        editor.apply();&#10;&#10;        // También guardar favoritos&#10;        saveFavorites(context);&#10;    }&#10;&#10;    private void sortTagsByFavorites() {&#10;        listaEtiquetas.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    public void saveFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;&#10;        Set&lt;String&gt; favorites = new HashSet&lt;&gt;();&#10;        for (Tag tag : listaEtiquetas) {&#10;            if (tag.isFavorite()) {&#10;                String tagKey = tag.getEtiquetaDescripcion();&#10;                favorites.add(tagKey);&#10;                editor.putLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, tag.getFavoriteTimestamp());&#10;            }&#10;        }&#10;&#10;        editor.putStringSet(FAVORITES_KEY, favorites);&#10;        editor.apply();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.models;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Set;&#10;import java.util.HashSet;&#10;&#10;public class GenerarData {&#10;&#10;    private static GenerarData instancia;&#10;    private List&lt;Note&gt; listaNotas;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private static final String PREFS_NAME = &quot;TagPreferences&quot;;&#10;    private static final String FAVORITES_KEY = &quot;favorites&quot;;&#10;    private static final String TIMESTAMPS_KEY = &quot;timestamps&quot;;&#10;    private static final String TAGS_KEY = &quot;all_tags&quot;;&#10;    private static final String TAG_SEPARATOR = &quot;||TAG_SEPARATOR||&quot;;&#10;&#10;    private GenerarData() {&#10;&#10;        listaNotas = new ArrayList&lt;&gt;();&#10;        listaEtiquetas = new ArrayList&lt;&gt;();&#10;&#10;        Tag tagTrabajo = new Tag(&quot;Trabajo&quot;);&#10;        Tag tagPersonal = new Tag(&quot;Personal&quot;);&#10;        Tag tagImportante = new Tag(&quot;Importante&quot;);&#10;        Tag tagIdeas = new Tag(&quot;Ideas&quot;);&#10;        Tag tagUrgente = new Tag(&quot;Urgente&quot;);&#10;&#10;        listaEtiquetas.add(tagTrabajo);&#10;        listaEtiquetas.add(tagPersonal);&#10;        listaEtiquetas.add(tagImportante);&#10;        listaEtiquetas.add(tagIdeas);&#10;        listaEtiquetas.add(tagUrgente);&#10;&#10;        listaNotas.add(new Note(1,&#10;                &quot;Lista de compras&quot;,&#10;                &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                Arrays.asList(tagPersonal),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(2,&#10;                &quot;Idea para proyecto&quot;,&#10;                &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                Arrays.asList(tagIdeas, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(3,&#10;                &quot;Cita médica&quot;,&#10;                &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                Arrays.asList(tagPersonal, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(4,&#10;                &quot;Plan de marketing&quot;,&#10;                &quot;Definir objetivos trimestrales, estudiar la competencia y proponer campañas.&quot;,&#10;                Arrays.asList(tagTrabajo),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(5,&#10;                &quot;Reunión con cliente&quot;,&#10;                &quot;No olvidar preparar la presentación y enviarla por correo antes del viernes.&quot;,&#10;                Arrays.asList(tagTrabajo, tagUrgente),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(6,&#10;                &quot;Lista de compras&quot;,&#10;                &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                Arrays.asList(tagPersonal),&#10;                true, true&#10;        ));&#10;        listaNotas.add(new Note(7,&#10;                &quot;Idea para proyecto&quot;,&#10;                &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                Arrays.asList(tagIdeas, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(8,&#10;                &quot;Cita médica&quot;,&#10;                &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                Arrays.asList(tagPersonal, tagImportante),&#10;                true, true&#10;        ));&#10;&#10;        listaNotas.add(new Note(9,&#10;                &quot;Plan de marketing&quot;,&#10;                &quot;Definir objetivos trimestrales, estudiar la competencia y proponer campañas.&quot;,&#10;                Arrays.asList(tagTrabajo),&#10;                true, true&#10;        ));&#10;&#10;    }&#10;&#10;    public List&lt;Note&gt; getListaNotas() {&#10;        return listaNotas;&#10;    }&#10;&#10;    public void setListaNotas(List&lt;Note&gt; listaNotas) {&#10;        this.listaNotas = listaNotas;&#10;    }&#10;&#10;    public List&lt;Tag&gt; getListaEtiquetas() {&#10;        return listaEtiquetas;&#10;    }&#10;&#10;    public void setListaEtiquetas(List&lt;Tag&gt; listaEtiquetas) {&#10;        this.listaEtiquetas = listaEtiquetas;&#10;    }&#10;&#10;    public static GenerarData getInstance() {&#10;        if (instancia == null) {&#10;            instancia = new GenerarData();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public void loadFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        Set&lt;String&gt; favorites = prefs.getStringSet(FAVORITES_KEY, new HashSet&lt;&gt;());&#10;        &#10;        for (Tag tag : listaEtiquetas) {&#10;            String tagKey = tag.getEtiquetaDescripcion();&#10;            if (favorites.contains(tagKey)) {&#10;                long timestamp = prefs.getLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, System.currentTimeMillis());&#10;                tag.setFavorite(true);&#10;                tag.setFavoriteTimestamp(timestamp);&#10;            }&#10;        }&#10;        &#10;        sortTagsByFavorites();&#10;    }&#10;&#10;    private void sortTagsByFavorites() {&#10;        listaEtiquetas.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    public void saveFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;&#10;        Set&lt;String&gt; favorites = new HashSet&lt;&gt;();&#10;        for (Tag tag : listaEtiquetas) {&#10;            if (tag.isFavorite()) {&#10;                String tagKey = tag.getEtiquetaDescripcion();&#10;                favorites.add(tagKey);&#10;                editor.putLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, tag.getFavoriteTimestamp());&#10;            }&#10;        }&#10;&#10;        editor.putStringSet(FAVORITES_KEY, favorites);&#10;        editor.apply();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/Tag.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/Tag.java" />
              <option name="originalContent" value="package com.sgionotes.models;&#10;&#10;public class Tag {&#10;    private String etiquetaDescripcion;&#10;    private boolean isFavorite;&#10;    private long favoriteTimestamp;&#10;&#10;    public Tag(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;        this.isFavorite = false;&#10;        this.favoriteTimestamp = 0;&#10;    }&#10;&#10;    public String getEtiquetaDescripcion() {&#10;        return etiquetaDescripcion;&#10;    }&#10;&#10;    public void setEtiquetaDescripcion(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;    }&#10;&#10;    public boolean isFavorite() {&#10;        return isFavorite;&#10;    }&#10;&#10;    public void setFavorite(boolean favorite) {&#10;        this.isFavorite = favorite;&#10;        if (favorite) {&#10;            this.favoriteTimestamp = System.currentTimeMillis();&#10;        } else {&#10;            this.favoriteTimestamp = 0;&#10;        }&#10;    }&#10;&#10;    public long getFavoriteTimestamp() {&#10;        return favoriteTimestamp;&#10;    }&#10;&#10;    public String getDisplayText() {&#10;        return etiquetaDescripcion;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.models;&#10;&#10;public class Tag {&#10;    private String etiquetaDescripcion;&#10;    private boolean isFavorite;&#10;    private long favoriteTimestamp;&#10;&#10;    public Tag(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;        this.isFavorite = false;&#10;        this.favoriteTimestamp = 0;&#10;    }&#10;&#10;    public String getEtiquetaDescripcion() {&#10;        return etiquetaDescripcion;&#10;    }&#10;&#10;    public void setEtiquetaDescripcion(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;    }&#10;&#10;    public boolean isFavorite() {&#10;        return isFavorite;&#10;    }&#10;&#10;    public void setFavorite(boolean favorite) {&#10;        this.isFavorite = favorite;&#10;        if (favorite) {&#10;            this.favoriteTimestamp = System.currentTimeMillis();&#10;        } else {&#10;            this.favoriteTimestamp = 0;&#10;        }&#10;    }&#10;&#10;    public long getFavoriteTimestamp() {&#10;        return favoriteTimestamp;&#10;    }&#10;&#10;    public void setFavoriteTimestamp(long timestamp) {&#10;        this.favoriteTimestamp = timestamp;&#10;    }&#10;&#10;    public String getDisplayText() {&#10;        return etiquetaDescripcion;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_chevron_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_chevron_right.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/textColor&quot;&#10;        android:pathData=&quot;M8.59,16.59L13.17,12L8.59,7.41L10,6l6,6l-6,6L8.59,16.59z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_star_outline.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_star_outline.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/transparent&quot;&#10;        android:strokeColor=&quot;@color/alternateColor&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineJoin=&quot;round&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M12,2l3.09,6.26L22,9.27l-5,4.87L18.18,22L12,18.8L5.82,22L7,14.14L2,9.27l6.91-1.01L12,2Z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/outline_tag_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/outline_tag_24.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/transparent&quot;&#10;        android:strokeColor=&quot;@color/alternateColor&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineJoin=&quot;round&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M20.59,13.41l-7.17,7.17a2,2 0,0 1,-2.83 0L2,12V2H12l8.59,8.59A2,2 0,0 1,20.59 13.41Z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/transparent&quot;&#10;        android:strokeColor=&quot;@color/alternateColor&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineJoin=&quot;round&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M7,7h0.01&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/popupMenuBackgroundColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;?attr/popupMenuStrokeColor&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_simple.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_simple.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;@android:color/white&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#CCCCCC&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_themed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_themed.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/cardColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/startGradient&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/cardColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/alternateColor&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/tag_item_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/tag_item_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/chipBackgroundColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;?attr/chipStrokeColor&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_tags.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_tags.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    style=&quot;@style/SCREEN&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    tools:context=&quot;.activities.TagsActivity&quot;&gt;&#10;&#10;    &lt;!-- Barra superior --&gt;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        app:navigationIcon=&quot;?attr/homeAsUpIndicator&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.chip.ChipGroup&#10;        android:id=&quot;@+id/chipGroup&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:chipSpacing=&quot;8dp&quot;&#10;        app:lineSpacing=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;2dp&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:background=&quot;@drawable/divider_gradient&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    style=&quot;@style/SCREEN&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    tools:context=&quot;.activities.TagsActivity&quot;&gt;&#10;&#10;    &lt;!-- Barra superior --&gt;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        app:navigationIcon=&quot;?attr/homeAsUpIndicator&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerViewTags&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;2dp&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:background=&quot;@drawable/divider_gradient&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_tag.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_tag.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.fragments.TagFragment&quot;&gt;&#10;&#10;    &lt;View&#10;        android:layout_marginStart=&quot;10dp&quot;&#10;        android:layout_marginEnd=&quot;10dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:layout_marginTop=&quot;2dp&quot;&#10;        android:layout_marginBottom=&quot;2dp&quot;&#10;        android:background=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;    &lt;include layout=&quot;@layout/layout_tag_add&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_marginStart=&quot;10dp&quot;&#10;        android:layout_marginEnd=&quot;10dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:layout_marginTop=&quot;2dp&quot;&#10;        android:layout_marginBottom=&quot;2dp&quot;&#10;        android:background=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerTags&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.fragments.TagFragment&quot;&gt;&#10;&#10;    &lt;include layout=&quot;@layout/layout_tag_add&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerTags&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_tag_editable.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_tag_editable.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;10dp&quot;&#10;    card_view:cardCornerRadius=&quot;10dp&quot;&#10;    card_view:cardElevation=&quot;5dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/cardColor&quot;&#10;        android:padding=&quot;10dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivTagIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:src=&quot;@drawable/outline_tag_24&quot; /&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivFavoriteIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:src=&quot;@drawable/ic_star_outline&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etTagText&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:focusableInTouchMode=&quot;false&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:maxLines=&quot;1&quot;&#10;            style=&quot;@style/TEXT&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnMore&quot;&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:src=&quot;@drawable/ic_chevron_right&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:contentDescription=&quot;Mas opciones&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;10dp&quot;&#10;    card_view:cardCornerRadius=&quot;10dp&quot;&#10;    card_view:cardElevation=&quot;5dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/cardColor&quot;&#10;        android:padding=&quot;10dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivTagIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:src=&quot;@drawable/outline_tag_24&quot; /&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivFavoriteIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:src=&quot;@drawable/ic_star_outline&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etTagText&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:focusableInTouchMode=&quot;false&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:maxLines=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            style=&quot;@style/TEXT&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnMore&quot;&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:src=&quot;@drawable/ic_chevron_right&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:layout_marginEnd=&quot;4dp&quot;&#10;            android:contentDescription=&quot;Mas opciones&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/popup_menu_tag.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/popup_menu_tag.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/popup_menu_background_simple&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/menuAddFavorite&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;⭐&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Añadir a favoritas&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/menuEdit&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;✏️&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Editar&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/menuDelete&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;️&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Eliminar&quot;&#10;            android:textColor=&quot;#FF0000&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/popup_menu_background_themed&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/menuAddFavorite&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;⭐&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Añadir a favoritas&quot;&#10;            style=&quot;@style/TEXT&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/menuEdit&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;✏️&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Editar&quot;&#10;            style=&quot;@style/TEXT&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/menuDelete&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;️&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Eliminar&quot;&#10;            android:textColor=&quot;#FF0000&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;alternateColor&quot;&gt;#fff&lt;/color&gt;&#10;    &lt;!-- Gradient modo oscuro --&gt;&#10;    &lt;color name=&quot;startGradient&quot;&gt;#673ab7&lt;/color&gt;&#10;    &lt;color name=&quot;endGradient&quot;&gt;#ff7000&lt;/color&gt;&#10;&#10;    &lt;!-- Color papelera --&gt;&#10;    &lt;color name=&quot;trashButtonColor&quot;&gt;@color/startGradient&lt;/color&gt;&#10;&#10;    &lt;!-- Colores chipsd --&gt;&#10;    &lt;color name=&quot;chipBackground&quot;&gt;#4A148C&lt;/color&gt;&#10;    &lt;color name=&quot;chipText&quot;&gt;#E1BEE7&lt;/color&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;alternateColor&quot;&gt;#fff&lt;/color&gt;&#10;    &lt;!-- Gradient modo oscuro --&gt;&#10;    &lt;color name=&quot;startGradient&quot;&gt;#673ab7&lt;/color&gt;&#10;    &lt;color name=&quot;endGradient&quot;&gt;#ff7000&lt;/color&gt;&#10;&#10;    &lt;!-- Color papelera --&gt;&#10;    &lt;color name=&quot;trashButtonColor&quot;&gt;@color/startGradient&lt;/color&gt;&#10;&#10;    &lt;!-- Colores chips --&gt;&#10;    &lt;color name=&quot;chipBackground&quot;&gt;#4A148C&lt;/color&gt;&#10;    &lt;color name=&quot;chipText&quot;&gt;#E1BEE7&lt;/color&gt;&#10;    &lt;color name=&quot;chipBackgroundColor&quot;&gt;@color/chipBackground&lt;/color&gt;&#10;    &lt;color name=&quot;chipStrokeColor&quot;&gt;#7B1FA2&lt;/color&gt;&#10;    &#10;    &lt;!-- Colores popup menu --&gt;&#10;    &lt;color name=&quot;popupMenuBackgroundColor&quot;&gt;#3E2723&lt;/color&gt;&#10;    &lt;color name=&quot;popupMenuStrokeColor&quot;&gt;#5D4037&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.Sgionotes&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/primaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/accent&lt;/item&gt;&#10;        &lt;item name=&quot;boxBackgroundColor&quot;&gt;#393939&lt;/item&gt;&#10;        &lt;item name=&quot;colorError&quot;&gt;@color/red&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorCardBorder&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;cardColor&quot;&gt;#333333&lt;/item&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Theme.Sgionotes&quot; parent=&quot;Base.Theme.Sgionotes&quot; /&gt;&#10;&#10;    &lt;style name=&quot;SCREEN&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;#232323&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;SCREEN_SECONDARY&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_textview_custom&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#FFF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT_CONST&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#000&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;BUTTON&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#FFF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.Sgionotes&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/primaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/accent&lt;/item&gt;&#10;        &lt;item name=&quot;boxBackgroundColor&quot;&gt;#393939&lt;/item&gt;&#10;        &lt;item name=&quot;colorError&quot;&gt;@color/red&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorCardBorder&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;cardColor&quot;&gt;#333333&lt;/item&gt;&#10;        &#10;        &lt;!-- Atributos para chips y popup menu --&gt;&#10;        &lt;item name=&quot;chipBackgroundColor&quot;&gt;@color/chipBackgroundColor&lt;/item&gt;&#10;        &lt;item name=&quot;chipStrokeColor&quot;&gt;@color/chipStrokeColor&lt;/item&gt;&#10;        &lt;item name=&quot;popupMenuBackgroundColor&quot;&gt;@color/popupMenuBackgroundColor&lt;/item&gt;&#10;        &lt;item name=&quot;popupMenuStrokeColor&quot;&gt;@color/popupMenuStrokeColor&lt;/item&gt;&#10;        &lt;item name=&quot;textColor&quot;&gt;@android:color/white&lt;/item&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Theme.Sgionotes&quot; parent=&quot;Base.Theme.Sgionotes&quot; /&gt;&#10;&#10;    &lt;style name=&quot;SCREEN&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;#232323&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;SCREEN_SECONDARY&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_textview_custom&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#FFF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT_CONST&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#000&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;BUTTON&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#FFF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/attrs.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/attrs.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- AtributosPopupChips--&gt;&#10;    &lt;attr name=&quot;chipBackgroundColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;chipStrokeColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;popupMenuBackgroundColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;popupMenuStrokeColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;textColor&quot; format=&quot;color|reference&quot; /&gt;&#10;&lt;/resources&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Atributos existentes del proyecto --&gt;&#10;    &lt;attr name=&quot;cardColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;colorCardBorder&quot; format=&quot;color|reference&quot; /&gt;&#10;    &#10;    &lt;!-- Atributos personalizados para chips y popup menu --&gt;&#10;    &lt;attr name=&quot;chipBackgroundColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;chipStrokeColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;popupMenuBackgroundColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;popupMenuStrokeColor&quot; format=&quot;color|reference&quot; /&gt;&#10;    &lt;attr name=&quot;textColor&quot; format=&quot;color|reference&quot; /&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;whiteSecondary&quot;&gt;#EDEBEB&lt;/color&gt;&#10;    &lt;color name=&quot;red&quot;&gt;#FF0000&lt;/color&gt;&#10;    &lt;color name=&quot;gray&quot;&gt;#5D5D5D&lt;/color&gt;&#10;    &lt;color name=&quot;purple&quot;&gt;#673ab7&lt;/color&gt;&#10;    &lt;color name=&quot;blue&quot;&gt;#0042ff&lt;/color&gt;&#10;    &lt;color name=&quot;orange&quot;&gt;#ff7000&lt;/color&gt;&#10;    &lt;color name=&quot;cian&quot;&gt;#00f3ff&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;primary&quot;&gt;#2f73ab&lt;/color&gt;&#10;    &lt;color name=&quot;primaryDark&quot;&gt;#1a5789&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;textSecondary&quot;&gt;#6E6E73&lt;/color&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#FFB84C&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;toolbarTitleBackground&quot;&gt;?attr/boxBackgroundColor&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;alternateColor&quot;&gt;#000&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;startGradient&quot;&gt;#00f3ff&lt;/color&gt; &lt;!-- inicio degradado celeste  --&gt;&#10;    &lt;color name=&quot;endGradient&quot;&gt;#0042ff&lt;/color&gt; &lt;!-- final degradado celeste  --&gt;&#10;&#10;    &lt;!-- vaciar papelera --&gt;&#10;    &lt;color name=&quot;trashButtonColor&quot;&gt;@color/cian&lt;/color&lt;/color&gt;&#10;&#10;    &lt;!-- ChipsColors --&gt;&#10;    &lt;color name=&quot;chipBackground&quot;&gt;#E3F2FD&lt;/color&gt;&#10;    &lt;color name=&quot;chipText&quot;&gt;#1565C0&lt;/color&gt;&#10;    &lt;color name=&quot;chipBackgroundColor&quot;&gt;@color/chipBackground&lt;/color&gt;&#10;    &lt;color name=&quot;chipStrokeColor&quot;&gt;#BBDEFB&lt;/color&gt;&#10;&#10;    &lt;!-- PopupColors --&gt;&#10;    &lt;color name=&quot;popupMenuBackgroundColor&quot;&gt;#D1C4E9&lt;/color&gt;&#10;    &lt;color name=&quot;popupMenuStrokeColor&quot;&gt;#9575CD&lt;/color&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;whiteSecondary&quot;&gt;#EDEBEB&lt;/color&gt;&#10;    &lt;color name=&quot;red&quot;&gt;#FF0000&lt;/color&gt;&#10;    &lt;color name=&quot;gray&quot;&gt;#5D5D5D&lt;/color&gt;&#10;    &lt;color name=&quot;purple&quot;&gt;#673ab7&lt;/color&gt;&#10;    &lt;color name=&quot;blue&quot;&gt;#0042ff&lt;/color&gt;&#10;    &lt;color name=&quot;orange&quot;&gt;#ff7000&lt;/color&gt;&#10;    &lt;color name=&quot;cian&quot;&gt;#00f3ff&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;primary&quot;&gt;#2f73ab&lt;/color&gt;&#10;    &lt;color name=&quot;primaryDark&quot;&gt;#1a5789&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;textSecondary&quot;&gt;#6E6E73&lt;/color&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#FFB84C&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;toolbarTitleBackground&quot;&gt;?attr/boxBackgroundColor&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;alternateColor&quot;&gt;#000&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;startGradient&quot;&gt;#00f3ff&lt;/color&gt; &lt;!-- inicio degradado celeste  --&gt;&#10;    &lt;color name=&quot;endGradient&quot;&gt;#0042ff&lt;/color&gt; &lt;!-- final degradado celeste  --&gt;&#10;&#10;    &lt;!-- vaciar papelera --&gt;&#10;    &lt;color name=&quot;trashButtonColor&quot;&gt;@color/cian&lt;/color&gt;&#10;&#10;    &lt;!-- ChipsColors --&gt;&#10;    &lt;color name=&quot;chipBackground&quot;&gt;#E3F2FD&lt;/color&gt;&#10;    &lt;color name=&quot;chipText&quot;&gt;#1565C0&lt;/color&gt;&#10;    &lt;color name=&quot;chipBackgroundColor&quot;&gt;@color/chipBackground&lt;/color&gt;&#10;    &lt;color name=&quot;chipStrokeColor&quot;&gt;#BBDEFB&lt;/color&gt;&#10;&#10;    &lt;!-- PopupColors --&gt;&#10;    &lt;color name=&quot;popupMenuBackgroundColor&quot;&gt;#D1C4E9&lt;/color&gt;&#10;    &lt;color name=&quot;popupMenuStrokeColor&quot;&gt;#9575CD&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.Sgionotes&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/primaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/accent&lt;/item&gt;&#10;        &lt;item name=&quot;boxBackgroundColor&quot;&gt;?attr/cardColor&lt;/item&gt;&#10;        &lt;item name=&quot;colorError&quot;&gt;@color/red&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorSecondary&quot;&gt;@color/textSecondary&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;true&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorCardBorder&quot;&gt;@color/textSecondary&lt;/item&gt;&#10;        &lt;item name=&quot;cardColor&quot;&gt;#E7E7E7&lt;/item&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Theme.Sgionotes&quot; parent=&quot;Base.Theme.Sgionotes&quot; /&gt;&#10;&#10;    &lt;style name=&quot;SCREEN&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;#EFEFEF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;SCREEN_SECONDARY&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_textview_custom&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#000&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT_CONST&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#000&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;BUTTON&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#FFF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.Sgionotes&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/primaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/accent&lt;/item&gt;&#10;        &lt;item name=&quot;boxBackgroundColor&quot;&gt;?attr/cardColor&lt;/item&gt;&#10;        &lt;item name=&quot;colorError&quot;&gt;@color/red&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorSecondary&quot;&gt;@color/textSecondary&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;true&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorCardBorder&quot;&gt;@color/textSecondary&lt;/item&gt;&#10;        &lt;item name=&quot;cardColor&quot;&gt;#E7E7E7&lt;/item&gt;&#10;        &#10;        &lt;!-- Atributos para chips y popup menu --&gt;&#10;        &lt;item name=&quot;chipBackgroundColor&quot;&gt;@color/chipBackgroundColor&lt;/item&gt;&#10;        &lt;item name=&quot;chipStrokeColor&quot;&gt;@color/chipStrokeColor&lt;/item&gt;&#10;        &lt;item name=&quot;popupMenuBackgroundColor&quot;&gt;@color/popupMenuBackgroundColor&lt;/item&gt;&#10;        &lt;item name=&quot;popupMenuStrokeColor&quot;&gt;@color/popupMenuStrokeColor&lt;/item&gt;&#10;        &lt;item name=&quot;textColor&quot;&gt;@android:color/black&lt;/item&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Theme.Sgionotes&quot; parent=&quot;Base.Theme.Sgionotes&quot; /&gt;&#10;&#10;    &lt;style name=&quot;SCREEN&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;#EFEFEF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;SCREEN_SECONDARY&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_textview_custom&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#000&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TEXT_CONST&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#000&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;BUTTON&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;#FFF&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>