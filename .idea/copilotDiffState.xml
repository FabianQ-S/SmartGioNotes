<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/DetailNoteActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/DetailNoteActivity.java" />
              <option name="originalContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.constraintlayout.widget.ConstraintLayout;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class DetailNoteActivity extends AppCompatActivity {&#10;&#10;    private ArrayList&lt;String&gt; etiquetasNota;&#10;    private TextView txtIdNotaDetailNote;&#10;    private EditText etTitulo;&#10;    private EditText etContenido;&#10;    private LinearLayout detailNote;&#10;    private boolean desdePapelera = false;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_detail_note);&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowTitleEnabled(false);&#10;        }&#10;&#10;        txtIdNotaDetailNote = findViewById(R.id.txtIdNotaDetailNote);&#10;        etTitulo = findViewById(R.id.etTitulo);&#10;        etContenido = findViewById(R.id.etmDetalleNota);&#10;        detailNote = findViewById(R.id.detailNote);&#10;&#10;        boolean esNueva = getIntent().getBooleanExtra(&quot;esNueva&quot;, false);&#10;&#10;        Intent intent = getIntent();&#10;        if (intent != null) {&#10;            String id = intent.getStringExtra(&quot;id&quot;);&#10;            String titulo = intent.getStringExtra(&quot;titulo&quot;);&#10;            String contenido = intent.getStringExtra(&quot;contenido&quot;);&#10;            desdePapelera = intent.getBooleanExtra(&quot;desdePapelera&quot;, false);&#10;            etiquetasNota = intent.getStringArrayListExtra(&quot;etiquetas&quot;);&#10;&#10;            txtIdNotaDetailNote.setText(id);&#10;            etTitulo.setText(titulo);&#10;            etContenido.setText(contenido);&#10;&#10;            if (desdePapelera) {&#10;                etTitulo.setFocusable(false);&#10;                etTitulo.setClickable(true);&#10;                etContenido.setFocusable(false);&#10;                etContenido.setClickable(true);&#10;&#10;                View.OnClickListener mostrarMensaje = v -&gt; {&#10;                    mostrarDialogoEliminarNotaIndividual(id);&#10;                };&#10;&#10;                etTitulo.setOnClickListener(mostrarMensaje);&#10;                etContenido.setOnClickListener(mostrarMensaje);&#10;            }&#10;        }&#10;&#10;        // Configurar visibilidad de botones según el tipo de nota&#10;        configurarVisibilidadBotones(esNueva, desdePapelera);&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.detailNote), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        findViewById(R.id.fabEtiquetas).setOnClickListener(v -&gt; {&#10;            if (!desdePapelera) {&#10;                Intent intentTags = new Intent(DetailNoteActivity.this, TagsActivity.class);&#10;                if (etiquetasNota != null) {&#10;                    intentTags.putStringArrayListExtra(&quot;tags&quot;, etiquetasNota);&#10;                }&#10;                startActivity(intentTags);&#10;            } else {&#10;                Snackbar.make(detailNote, &quot;No es posible editar etiquetas desde la papelera&quot;, Snackbar.LENGTH_LONG).show();&#10;            }&#10;        });&#10;&#10;        findViewById(R.id.fabEliminar).setOnClickListener(v -&gt; {&#10;            if (desdePapelera) {&#10;                mostrarDialogoEliminarNotaIndividual(txtIdNotaDetailNote.getText().toString());&#10;            } else {&#10;                mostrarDialogoEnviarPapelera();&#10;            }&#10;        });&#10;&#10;        findViewById(R.id.fabUbicacion).setOnClickListener(v -&gt; {&#10;            // Funcionalidad GPS pendiente&#10;            Toast.makeText(this, &quot;Función GPS próximamente&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;    }&#10;&#10;    private void configurarVisibilidadBotones(boolean esNueva, boolean desdePapelera) {&#10;        View fabEtiquetas = findViewById(R.id.fabEtiquetas);&#10;        View fabEliminar = findViewById(R.id.fabEliminar);&#10;        View fabUbicacion = findViewById(R.id.fabUbicacion);&#10;&#10;        if (esNueva) {&#10;            // Nota nueva: solo mostrar botón de etiquetas&#10;            fabEtiquetas.setVisibility(View.VISIBLE);&#10;            fabEliminar.setVisibility(View.GONE);&#10;            fabUbicacion.setVisibility(View.GONE);&#10;        } else if (desdePapelera) {&#10;            // Desde papelera: solo mostrar botón eliminar permanentemente&#10;            fabEtiquetas.setVisibility(View.GONE);&#10;            fabEliminar.setVisibility(View.VISIBLE);&#10;            fabUbicacion.setVisibility(View.GONE);&#10;        } else {&#10;            // Nota existente: mostrar todos los botones&#10;            fabEtiquetas.setVisibility(View.VISIBLE);&#10;            fabEliminar.setVisibility(View.VISIBLE);&#10;            fabUbicacion.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void mostrarDialogoEnviarPapelera() {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this)&#10;                .setMessage(&quot;La nota se enviará a papelera&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    enviarNotaAPapelera();&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, getTheme()) :&#10;                    getResources().getColor(R.color.cian, getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void mostrarDialogoEliminarNotaIndividual(String noteId) {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this)&#10;                .setMessage(&quot;La nota se eliminará permanentemente&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    eliminarNotaPermanentemente(noteId);&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, getTheme()) :&#10;                    getResources().getColor(R.color.cian, getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void enviarNotaAPapelera() {&#10;        String noteId = txtIdNotaDetailNote.getText().toString();&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        if (noteId != null &amp;&amp; !noteId.isEmpty()) {&#10;            generarData.getFirestoreRepository().moveNoteToTrash(noteId, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    runOnUiThread(() -&gt; {&#10;                        // Forzar actualización de datos después de enviar a papelera&#10;                        generarData.refreshDataForCurrentUser();&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Nota enviada a papelera&quot;, Toast.LENGTH_SHORT).show();&#10;                        // Redirigir al menú principal de notas&#10;                        Intent intent = new Intent(DetailNoteActivity.this, MainActivity.class);&#10;                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;                        startActivity(intent);&#10;                        finish();&#10;                    });&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Error al enviar a papelera: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void eliminarNotaPermanentemente(String noteId) {&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        if (noteId != null &amp;&amp; !noteId.isEmpty()) {&#10;            generarData.getFirestoreRepository().deleteNotePermanently(noteId, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Nota eliminada permanentemente&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    });&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Error al eliminar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        if (!desdePapelera) {&#10;            guardarNota();&#10;        }&#10;    }&#10;&#10;    private void guardarNota() {&#10;        String id = txtIdNotaDetailNote.getText().toString();&#10;        String titulo = etTitulo.getText().toString();&#10;        String contenido = etContenido.getText().toString();&#10;&#10;        if (titulo.trim().isEmpty() &amp;&amp; contenido.trim().isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        if (id == null || id.isEmpty()) {&#10;            // Nueva nota&#10;            Note nuevaNota = new Note(titulo, contenido);&#10;            if (etiquetasNota != null) {&#10;                nuevaNota.setTagIds(etiquetasNota);&#10;            }&#10;            generarData.getFirestoreRepository().saveNote(nuevaNota, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    // Nota guardada exitosamente&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    Toast.makeText(DetailNoteActivity.this, &quot;Error al guardar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        } else {&#10;            // Actualizar nota existente&#10;            Note notaActualizada = new Note(titulo, contenido);&#10;            notaActualizada.setId(id);&#10;            if (etiquetasNota != null) {&#10;                notaActualizada.setTagIds(etiquetasNota);&#10;            }&#10;&#10;            generarData.getFirestoreRepository().saveNote(notaActualizada, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    // Nota actualizada exitosamente&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    Toast.makeText(DetailNoteActivity.this, &quot;Error al actualizar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.constraintlayout.widget.ConstraintLayout;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class DetailNoteActivity extends AppCompatActivity {&#10;&#10;    private ArrayList&lt;String&gt; etiquetasNota;&#10;    private TextView txtIdNotaDetailNote;&#10;    private EditText etTitulo;&#10;    private EditText etContenido;&#10;    private LinearLayout detailNote;&#10;    private boolean desdePapelera = false;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_detail_note);&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowTitleEnabled(false);&#10;        }&#10;&#10;        txtIdNotaDetailNote = findViewById(R.id.txtIdNotaDetailNote);&#10;        etTitulo = findViewById(R.id.etTitulo);&#10;        etContenido = findViewById(R.id.etmDetalleNota);&#10;        detailNote = findViewById(R.id.detailNote);&#10;&#10;        boolean esNueva = getIntent().getBooleanExtra(&quot;esNueva&quot;, false);&#10;&#10;        Intent intent = getIntent();&#10;        if (intent != null) {&#10;            String id = intent.getStringExtra(&quot;id&quot;);&#10;            String titulo = intent.getStringExtra(&quot;titulo&quot;);&#10;            String contenido = intent.getStringExtra(&quot;contenido&quot;);&#10;            desdePapelera = intent.getBooleanExtra(&quot;desdePapelera&quot;, false);&#10;            etiquetasNota = intent.getStringArrayListExtra(&quot;etiquetas&quot;);&#10;&#10;            txtIdNotaDetailNote.setText(id);&#10;            etTitulo.setText(titulo);&#10;            etContenido.setText(contenido);&#10;&#10;            if (desdePapelera) {&#10;                etTitulo.setFocusable(false);&#10;                etTitulo.setClickable(true);&#10;                etContenido.setFocusable(false);&#10;                etContenido.setClickable(true);&#10;&#10;                View.OnClickListener mostrarMensaje = v -&gt; {&#10;                    mostrarDialogoEliminarNotaIndividual(id);&#10;                };&#10;&#10;                etTitulo.setOnClickListener(mostrarMensaje);&#10;                etContenido.setOnClickListener(mostrarMensaje);&#10;            }&#10;        }&#10;&#10;        // Configurar visibilidad de botones según el tipo de nota&#10;        configurarVisibilidadBotones(esNueva, desdePapelera);&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.detailNote), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        findViewById(R.id.fabEtiquetas).setOnClickListener(v -&gt; {&#10;            if (!desdePapelera) {&#10;                Intent intentTags = new Intent(DetailNoteActivity.this, TagsActivity.class);&#10;                if (etiquetasNota != null) {&#10;                    intentTags.putStringArrayListExtra(&quot;tags&quot;, etiquetasNota);&#10;                }&#10;                startActivity(intentTags);&#10;            } else {&#10;                Snackbar.make(detailNote, &quot;No es posible editar etiquetas desde la papelera&quot;, Snackbar.LENGTH_LONG).show();&#10;            }&#10;        });&#10;&#10;        findViewById(R.id.fabEliminar).setOnClickListener(v -&gt; {&#10;            if (desdePapelera) {&#10;                mostrarDialogoEliminarNotaIndividual(txtIdNotaDetailNote.getText().toString());&#10;            } else {&#10;                mostrarDialogoEnviarPapelera();&#10;            }&#10;        });&#10;&#10;        findViewById(R.id.fabUbicacion).setOnClickListener(v -&gt; {&#10;            // Funcionalidad GPS pendiente&#10;            Toast.makeText(this, &quot;Función GPS próximamente&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;    }&#10;&#10;    private void configurarVisibilidadBotones(boolean esNueva, boolean desdePapelera) {&#10;        View fabEtiquetas = findViewById(R.id.fabEtiquetas);&#10;        View fabEliminar = findViewById(R.id.fabEliminar);&#10;        View fabUbicacion = findViewById(R.id.fabUbicacion);&#10;&#10;        if (esNueva) {&#10;            // Nota nueva: solo mostrar botón de etiquetas&#10;            fabEtiquetas.setVisibility(View.VISIBLE);&#10;            fabEliminar.setVisibility(View.GONE);&#10;            fabUbicacion.setVisibility(View.GONE);&#10;        } else if (desdePapelera) {&#10;            // Desde papelera: solo mostrar botón eliminar permanentemente&#10;            fabEtiquetas.setVisibility(View.GONE);&#10;            fabEliminar.setVisibility(View.VISIBLE);&#10;            fabUbicacion.setVisibility(View.GONE);&#10;        } else {&#10;            // Nota existente: mostrar todos los botones&#10;            fabEtiquetas.setVisibility(View.VISIBLE);&#10;            fabEliminar.setVisibility(View.VISIBLE);&#10;            fabUbicacion.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void mostrarDialogoEnviarPapelera() {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this)&#10;                .setMessage(&quot;La nota se enviará a papelera&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    enviarNotaAPapelera();&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, getTheme()) :&#10;                    getResources().getColor(R.color.cian, getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void mostrarDialogoEliminarNotaIndividual(String noteId) {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this)&#10;                .setMessage(&quot;La nota se eliminará permanentemente&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    eliminarNotaPermanentemente(noteId);&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, getTheme()) :&#10;                    getResources().getColor(R.color.cian, getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void enviarNotaAPapelera() {&#10;        String noteId = txtIdNotaDetailNote.getText().toString();&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        if (noteId != null &amp;&amp; !noteId.isEmpty()) {&#10;            // Primero guardar la nota actual antes de enviarla a papelera&#10;            guardarNotaAntesDePapelera();&#10;&#10;            generarData.getFirestoreRepository().moveNoteToTrash(noteId, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Nota enviada a papelera&quot;, Toast.LENGTH_SHORT).show();&#10;                        // Agregar un delay antes de actualizar datos y redirigir&#10;                        new android.os.Handler().postDelayed(() -&gt; {&#10;                            generarData.refreshDataForCurrentUser();&#10;                            Intent intent = new Intent(DetailNoteActivity.this, MainActivity.class);&#10;                            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;                            startActivity(intent);&#10;                            finish();&#10;                        }, 500); // Esperar 500ms para que Firebase procese el cambio&#10;                    });&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Error al enviar a papelera: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                }&#10;            });&#10;        } else {&#10;            Toast.makeText(this, &quot;Error: ID de nota no válido&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void guardarNotaAntesDePapelera() {&#10;        String id = txtIdNotaDetailNote.getText().toString();&#10;        String titulo = etTitulo.getText().toString();&#10;        String contenido = etContenido.getText().toString();&#10;&#10;        if ((titulo.trim().isEmpty() &amp;&amp; contenido.trim().isEmpty()) || id == null || id.isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        // Actualizar la nota con el contenido actual antes de enviarla a papelera&#10;        Note notaActualizada = new Note(titulo, contenido);&#10;        notaActualizada.setId(id);&#10;        if (etiquetasNota != null) {&#10;            notaActualizada.setTagIds(etiquetasNota);&#10;        }&#10;&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        generarData.getFirestoreRepository().saveNote(notaActualizada, new FirestoreRepository.SimpleCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                // Nota actualizada antes de enviar a papelera&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                // Error al actualizar, pero continuamos con el proceso&#10;            }&#10;        });&#10;    }&#10;&#10;    private void eliminarNotaPermanentemente(String noteId) {&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        if (noteId != null &amp;&amp; !noteId.isEmpty()) {&#10;            generarData.getFirestoreRepository().deleteNotePermanently(noteId, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Nota eliminada permanentemente&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    });&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(DetailNoteActivity.this, &quot;Error al eliminar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        if (!desdePapelera) {&#10;            guardarNota();&#10;        }&#10;    }&#10;&#10;    private void guardarNota() {&#10;        String id = txtIdNotaDetailNote.getText().toString();&#10;        String titulo = etTitulo.getText().toString();&#10;        String contenido = etContenido.getText().toString();&#10;&#10;        if (titulo.trim().isEmpty() &amp;&amp; contenido.trim().isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        if (id == null || id.isEmpty()) {&#10;            // Nueva nota&#10;            Note nuevaNota = new Note(titulo, contenido);&#10;            if (etiquetasNota != null) {&#10;                nuevaNota.setTagIds(etiquetasNota);&#10;            }&#10;            generarData.getFirestoreRepository().saveNote(nuevaNota, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    // Nota guardada exitosamente&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    Toast.makeText(DetailNoteActivity.this, &quot;Error al guardar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        } else {&#10;            // Actualizar nota existente&#10;            Note notaActualizada = new Note(titulo, contenido);&#10;            notaActualizada.setId(id);&#10;            if (etiquetasNota != null) {&#10;                notaActualizada.setTagIds(etiquetasNota);&#10;            }&#10;&#10;            generarData.getFirestoreRepository().saveNote(notaActualizada, new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    // Nota actualizada exitosamente&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    Toast.makeText(DetailNoteActivity.this, &quot;Error al actualizar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/fragments/TrashFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/fragments/TrashFragment.java" />
              <option name="originalContent" value="package com.sgionotes.fragments;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.recyclerview.widget.StaggeredGridLayoutManager;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.Toast;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.sgionotes.R;&#10;import com.sgionotes.activities.DetailNoteActivity;&#10;import com.sgionotes.adapters.NoteAdapter;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class TrashFragment extends Fragment implements GenerarData.DataChangeListener {&#10;&#10;    private RecyclerView recyclerTrashNotes;&#10;    private NoteAdapter notaAdapter;&#10;    private List&lt;Note&gt; listaNotasTrash;&#10;    private Button btnVaciarPapelera;&#10;    private GenerarData generarData;&#10;&#10;    public TrashFragment() {&#10;        // Constructor vacío requerido&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        View vista = inflater.inflate(R.layout.fragment_trash, container, false);&#10;&#10;        generarData = GenerarData.getInstancia();&#10;        generarData.addDataChangeListener(this);&#10;&#10;        recyclerTrashNotes = vista.findViewById(R.id.recyclerTrashNotes);&#10;        btnVaciarPapelera = vista.findViewById(R.id.btnVaciarPapelera);&#10;&#10;        recyclerTrashNotes.setLayoutManager(&#10;                new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)&#10;        );&#10;&#10;        cargarNotasPapelera();&#10;&#10;        notaAdapter = new NoteAdapter(getContext(), listaNotasTrash);&#10;        recyclerTrashNotes.setAdapter(notaAdapter);&#10;&#10;        notaAdapter.setOnItemClickListener(nota -&gt; {&#10;            mostrarDialogoEliminarNotaIndividual(nota);&#10;        });&#10;&#10;        btnVaciarPapelera.setOnClickListener(btn -&gt; {&#10;            mostrarDialogoVaciarPapelera();&#10;        });&#10;&#10;        return vista;&#10;    }&#10;&#10;    private void cargarNotasPapelera() {&#10;        listaNotasTrash = generarData.getListaNotas()&#10;                .stream()&#10;                .filter(Note::isTrash)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    private void mostrarDialogoEliminarNotaIndividual(Note nota) {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(requireContext())&#10;                .setMessage(&quot;La nota se eliminará permanentemente&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    eliminarNotaIndividual(nota.getId());&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, requireContext().getTheme()) :&#10;                    getResources().getColor(R.color.cian, requireContext().getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void eliminarNotaIndividual(String noteId) {&#10;        generarData.getFirestoreRepository().deleteNotePermanently(noteId, new FirestoreRepository.SimpleCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        Toast.makeText(getContext(), &quot;Nota eliminada permanentemente&quot;, Toast.LENGTH_SHORT).show();&#10;                        actualizarLista();&#10;                    });&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        Toast.makeText(getContext(), &quot;Error al eliminar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void mostrarDialogoVaciarPapelera() {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(requireContext())&#10;                .setMessage(&quot;¿Está seguro de eliminar permanentemente las notas?&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    vaciarPapelera();&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, requireContext().getTheme()) :&#10;                    getResources().getColor(R.color.cian, requireContext().getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void vaciarPapelera() {&#10;        List&lt;Note&gt; notasEnPapelera = generarData.getListaNotas()&#10;                .stream()&#10;                .filter(Note::isTrash)&#10;                .collect(Collectors.toList());&#10;&#10;        if (notasEnPapelera.isEmpty()) {&#10;            Toast.makeText(getContext(), &quot;La papelera ya está vacía&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        int totalNotas = notasEnPapelera.size();&#10;        int[] notasEliminadas = {0};&#10;&#10;        for (Note nota : notasEnPapelera) {&#10;            generarData.getFirestoreRepository().deleteNotePermanently(nota.getId(), new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    notasEliminadas[0]++;&#10;                    if (notasEliminadas[0] == totalNotas) {&#10;                        if (getActivity() != null) {&#10;                            getActivity().runOnUiThread(() -&gt; {&#10;                                Toast.makeText(getContext(), &quot;Papelera vaciada correctamente&quot;, Toast.LENGTH_SHORT).show();&#10;                                actualizarLista();&#10;                            });&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (getActivity() != null) {&#10;                        getActivity().runOnUiThread(() -&gt; {&#10;                            Toast.makeText(getContext(), &quot;Error al vaciar papelera: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                        });&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void actualizarLista() {&#10;        cargarNotasPapelera();&#10;        if (notaAdapter != null) {&#10;            notaAdapter.notifyDataSetChanged();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDataChanged() {&#10;        if (getActivity() != null) {&#10;            getActivity().runOnUiThread(this::actualizarLista);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroy() {&#10;        super.onDestroy();&#10;        if (generarData != null) {&#10;            generarData.removeDataChangeListener(this);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        actualizarLista();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sgionotes.fragments;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.recyclerview.widget.StaggeredGridLayoutManager;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.Toast;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.sgionotes.R;&#10;import com.sgionotes.activities.DetailNoteActivity;&#10;import com.sgionotes.adapters.NoteAdapter;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class TrashFragment extends Fragment implements GenerarData.DataChangeListener {&#10;&#10;    private RecyclerView recyclerTrashNotes;&#10;    private NoteAdapter notaAdapter;&#10;    private List&lt;Note&gt; listaNotasTrash;&#10;    private Button btnVaciarPapelera;&#10;    private GenerarData generarData;&#10;&#10;    public TrashFragment() {&#10;        // Constructor vacío requerido&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        View vista = inflater.inflate(R.layout.fragment_trash, container, false);&#10;&#10;        generarData = GenerarData.getInstancia();&#10;        generarData.addDataChangeListener(this);&#10;&#10;        recyclerTrashNotes = vista.findViewById(R.id.recyclerTrashNotes);&#10;        btnVaciarPapelera = vista.findViewById(R.id.btnVaciarPapelera);&#10;&#10;        recyclerTrashNotes.setLayoutManager(&#10;                new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)&#10;        );&#10;&#10;        cargarNotasPapelera();&#10;&#10;        notaAdapter = new NoteAdapter(getContext(), listaNotasTrash);&#10;        recyclerTrashNotes.setAdapter(notaAdapter);&#10;&#10;        notaAdapter.setOnItemClickListener(nota -&gt; {&#10;            mostrarDialogoEliminarNotaIndividual(nota);&#10;        });&#10;&#10;        btnVaciarPapelera.setOnClickListener(btn -&gt; {&#10;            mostrarDialogoVaciarPapelera();&#10;        });&#10;&#10;        return vista;&#10;    }&#10;&#10;    private void cargarNotasPapelera() {&#10;        listaNotasTrash = generarData.getListaNotas()&#10;                .stream()&#10;                .filter(Note::isTrash)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    private void mostrarDialogoEliminarNotaIndividual(Note nota) {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(requireContext())&#10;                .setMessage(&quot;La nota se eliminará permanentemente&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    eliminarNotaIndividual(nota.getId());&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, requireContext().getTheme()) :&#10;                    getResources().getColor(R.color.cian, requireContext().getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void eliminarNotaIndividual(String noteId) {&#10;        generarData.getFirestoreRepository().deleteNotePermanently(noteId, new FirestoreRepository.SimpleCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        // Forzar actualización de datos después de eliminar&#10;                        generarData.refreshDataForCurrentUser();&#10;                        Toast.makeText(getContext(), &quot;Nota eliminada permanentemente&quot;, Toast.LENGTH_SHORT).show();&#10;                        actualizarLista();&#10;                    });&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        Toast.makeText(getContext(), &quot;Error al eliminar nota: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void mostrarDialogoVaciarPapelera() {&#10;        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(requireContext())&#10;                .setMessage(&quot;¿Está seguro de eliminar permanentemente las notas?&quot;)&#10;                .setPositiveButton(&quot;Aceptar&quot;, (dialogInterface, which) -&gt; {&#10;                    vaciarPapelera();&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, null);&#10;&#10;        androidx.appcompat.app.AlertDialog alertDialog = dialog.create();&#10;        alertDialog.setOnShowListener(dialogInterface -&gt; {&#10;            boolean isDarkMode = (getResources().getConfiguration().uiMode &amp;&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_MASK) ==&#10;                    android.content.res.Configuration.UI_MODE_NIGHT_YES;&#10;            int buttonColor = isDarkMode ?&#10;                    getResources().getColor(R.color.purple, requireContext().getTheme()) :&#10;                    getResources().getColor(R.color.cian, requireContext().getTheme());&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE)&#10;                    .setTextColor(buttonColor);&#10;            alertDialog.getButton(androidx.appcompat.app.AlertDialog.BUTTON_NEGATIVE)&#10;                    .setTextColor(buttonColor);&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    private void vaciarPapelera() {&#10;        List&lt;Note&gt; notasEnPapelera = generarData.getListaNotas()&#10;                .stream()&#10;                .filter(Note::isTrash)&#10;                .collect(Collectors.toList());&#10;&#10;        if (notasEnPapelera.isEmpty()) {&#10;            Toast.makeText(getContext(), &quot;La papelera ya está vacía&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        int totalNotas = notasEnPapelera.size();&#10;        int[] notasEliminadas = {0};&#10;&#10;        for (Note nota : notasEnPapelera) {&#10;            generarData.getFirestoreRepository().deleteNotePermanently(nota.getId(), new FirestoreRepository.SimpleCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    notasEliminadas[0]++;&#10;                    if (notasEliminadas[0] == totalNotas) {&#10;                        if (getActivity() != null) {&#10;                            getActivity().runOnUiThread(() -&gt; {&#10;                                Toast.makeText(getContext(), &quot;Papelera vaciada correctamente&quot;, Toast.LENGTH_SHORT).show();&#10;                                actualizarLista();&#10;                            });&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (getActivity() != null) {&#10;                        getActivity().runOnUiThread(() -&gt; {&#10;                            Toast.makeText(getContext(), &quot;Error al vaciar papelera: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                        });&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void actualizarLista() {&#10;        cargarNotasPapelera();&#10;        if (notaAdapter != null) {&#10;            notaAdapter.notifyDataSetChanged();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDataChanged() {&#10;        if (getActivity() != null) {&#10;            getActivity().runOnUiThread(this::actualizarLista);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroy() {&#10;        super.onDestroy();&#10;        if (generarData != null) {&#10;            generarData.removeDataChangeListener(this);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        actualizarLista();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>