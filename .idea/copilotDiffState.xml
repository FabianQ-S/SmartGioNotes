<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    id 'com.google.gms.google-services'&#10;}&#10;&#10;android {&#10;    namespace 'com.sgionotes'&#10;    compileSdk 35&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.sgionotes&quot;&#10;        minSdk 24&#10;        targetSdk 35&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_11&#10;        targetCompatibility JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation libs.appcompat&#10;    implementation libs.material&#10;    implementation libs.activity&#10;    implementation libs.constraintlayout&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.ext.junit&#10;    androidTestImplementation libs.espresso.core&#10;&#10;    // Firebase (auntenticacion)&#10;    implementation platform('com.google.firebase:firebase-bom:32.7.0')&#10;    implementation 'com.google.firebase:firebase-auth'&#10;    implementation 'com.google.firebase:firebase-firestore'&#10;    implementation 'com.google.firebase:firebase-analytics'&#10;&#10;    // RoomSqlite&#10;    implementation 'androidx.room:room-runtime:2.6.1'&#10;    implementation 'androidx.room:room-ktx:2.6.1'&#10;    annotationProcessor 'androidx.room:room-compiler:2.6.1'&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    id 'com.google.gms.google-services'&#10;}&#10;&#10;android {&#10;    namespace 'com.sgionotes'&#10;    compileSdk 35&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.sgionotes&quot;&#10;        minSdk 24&#10;        targetSdk 35&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_11&#10;        targetCompatibility JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation libs.appcompat&#10;    implementation libs.material&#10;    implementation libs.activity&#10;    implementation libs.constraintlayout&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.ext.junit&#10;    androidTestImplementation libs.espresso.core&#10;&#10;    // Firebase (auntenticacion)&#10;    implementation platform('com.google.firebase:firebase-bom:32.7.0')&#10;    implementation 'com.google.firebase:firebase-auth'&#10;    implementation 'com.google.firebase:firebase-firestore'&#10;    implementation 'com.google.firebase:firebase-analytics'&#10;&#10;    // RoomSqlite&#10;    implementation 'androidx.room:room-runtime:2.6.1'&#10;    implementation 'androidx.room:room-ktx:2.6.1'&#10;    annotationProcessor 'androidx.room:room-compiler:2.6.1'&#10;&#10;    // Gson para conversión JSON&#10;    implementation 'com.google.code.gson:gson:2.10.1'&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/google-services.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/google-services.json" />
              <option name="updatedContent" value="{&#10;  &quot;project_info&quot;: {&#10;    &quot;project_number&quot;: &quot;123456789&quot;,&#10;    &quot;project_id&quot;: &quot;smartgionotes-demo&quot;,&#10;    &quot;storage_bucket&quot;: &quot;smartgionotes-demo.appspot.com&quot;&#10;  },&#10;  &quot;client&quot;: [&#10;    {&#10;      &quot;client_info&quot;: {&#10;        &quot;mobilesdk_app_id&quot;: &quot;1:123456789:android:abcdef123456&quot;,&#10;        &quot;android_client_info&quot;: {&#10;          &quot;package_name&quot;: &quot;com.sgionotes&quot;&#10;        }&#10;      },&#10;      &quot;oauth_client&quot;: [&#10;        {&#10;          &quot;client_id&quot;: &quot;123456789-abcdef.apps.googleusercontent.com&quot;,&#10;          &quot;client_type&quot;: 3&#10;        }&#10;      ],&#10;      &quot;api_key&quot;: [&#10;        {&#10;          &quot;current_key&quot;: &quot;AIzaSyDemo_Key_Replace_With_Real_Key&quot;&#10;        }&#10;      ],&#10;      &quot;services&quot;: {&#10;        &quot;appinvite_service&quot;: {&#10;          &quot;other_platform_oauth_client&quot;: []&#10;        }&#10;      }&#10;    }&#10;  ],&#10;  &quot;configuration_version&quot;: &quot;1&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/LoginActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/LoginActivity.java" />
              <option name="originalContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.sgionotes.R;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;import com.sgionotes.models.GenerarData;&#10;&#10;public class LoginActivity extends AppCompatActivity {&#10;&#10;    private Button btnLogin;&#10;    private TextView registerRedirect;&#10;    private EditText txtEmail;&#10;    private EditText txtPassword;&#10;    private LinearLayout loginMain;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirestoreRepository firestoreRepository;&#10;    boolean registroExitoso;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_login);&#10;&#10;        // Inicializar Firebase Auth y Firestore Repository&#10;        mAuth = FirebaseAuth.getInstance();&#10;        firestoreRepository = new FirestoreRepository();&#10;&#10;        registroExitoso = getIntent().getBooleanExtra(&quot;registro_exitoso&quot;, false);&#10;&#10;        txtEmail = findViewById(R.id.txtEmail);&#10;        txtPassword = findViewById(R.id.txtPassword);&#10;        btnLogin = findViewById(R.id.btnLogin);&#10;        loginMain = findViewById(R.id.loginMain);&#10;&#10;        if (registroExitoso) {&#10;            Snackbar.make(loginMain, &quot;Cuenta creada. Inicia sesión con tus credenciales&quot;, Snackbar.LENGTH_LONG).show();&#10;        }&#10;&#10;        btnLogin.setOnClickListener(btn -&gt; {&#10;            String email = txtEmail.getText().toString().trim();&#10;            String password = txtPassword.getText().toString().trim();&#10;&#10;            if (email.isEmpty() || password.isEmpty()) {&#10;                Snackbar.make(loginMain, &quot;Completa los campos para acceder&quot;, Snackbar.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;&#10;            // Mostrar loading&#10;            btnLogin.setEnabled(false);&#10;            btnLogin.setText(&quot;Iniciando sesión...&quot;);&#10;&#10;            loginWithFirebase(email, password);&#10;        });&#10;&#10;        registerRedirect = findViewById(R.id.registerRedirect);&#10;        registerRedirect.setOnClickListener(reg -&gt; {&#10;            Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);&#10;            startActivity(intent);&#10;            finish();&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.loginMain), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    private void loginWithFirebase(String email, String password) {&#10;        mAuth.signInWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Login exitoso - cargar datos del usuario&#10;                        FirebaseUser user = mAuth.getCurrentUser();&#10;                        Snackbar.make(loginMain, &quot;Bienvenido &quot; + user.getEmail(), Snackbar.LENGTH_SHORT).show();&#10;                        loadUserDataAndNavigate();&#10;                    } else {&#10;                        // Login falló&#10;                        Snackbar.make(loginMain, &quot;Usuario y/o contraseña inválidos&quot;, Snackbar.LENGTH_SHORT).show();&#10;                        btnLogin.setEnabled(true);&#10;                        btnLogin.setText(&quot;Iniciar Sesión&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void loadUserDataAndNavigate() {&#10;        // Inicializar SQLite con el contexto&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        generarData.initializeWithContext(this);&#10;&#10;        // Intentar restaurar datos desde Firestore (opcional, no bloquea la navegación)&#10;        firestoreRepository.restoreDataFromFirestore(new FirestoreRepository.DataSyncCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                // Datos restaurados exitosamente desde Firestore&#10;                navigateToMainActivity();&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                // Si falla la restauración, usar datos locales SQLite&#10;                Log.d(&quot;LoginActivity&quot;, &quot;No se pudieron restaurar datos desde Firestore, usando datos locales: &quot; + error);&#10;                navigateToMainActivity();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void navigateToMainActivity() {&#10;        Intent intent = new Intent(LoginActivity.this, MainActivity.class);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    protected void onStart() {&#10;        super.onStart();&#10;        // Verificar si el usuario ya está logueado&#10;        FirebaseUser currentUser = mAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            // Usuario ya está logueado, cargar datos y navegar&#10;            loadUserDataAndNavigate();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.sgionotes.R;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;import com.sgionotes.models.GenerarData;&#10;&#10;public class LoginActivity extends AppCompatActivity {&#10;&#10;    private Button btnLogin;&#10;    private TextView registerRedirect;&#10;    private EditText txtEmail;&#10;    private EditText txtPassword;&#10;    private LinearLayout loginMain;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirestoreRepository firestoreRepository;&#10;    boolean registroExitoso;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_login);&#10;&#10;        // Inicializar Firebase Auth y Firestore Repository&#10;        mAuth = FirebaseAuth.getInstance();&#10;        firestoreRepository = new FirestoreRepository(this); // Pasar context&#10;&#10;        registroExitoso = getIntent().getBooleanExtra(&quot;registro_exitoso&quot;, false);&#10;&#10;        txtEmail = findViewById(R.id.txtEmail);&#10;        txtPassword = findViewById(R.id.txtPassword);&#10;        btnLogin = findViewById(R.id.btnLogin);&#10;        loginMain = findViewById(R.id.loginMain);&#10;&#10;        if (registroExitoso) {&#10;            Snackbar.make(loginMain, &quot;Cuenta creada. Inicia sesión con tus credenciales&quot;, Snackbar.LENGTH_LONG).show();&#10;        }&#10;&#10;        btnLogin.setOnClickListener(btn -&gt; {&#10;            String email = txtEmail.getText().toString().trim();&#10;            String password = txtPassword.getText().toString().trim();&#10;&#10;            if (email.isEmpty() || password.isEmpty()) {&#10;                Snackbar.make(loginMain, &quot;Completa los campos para acceder&quot;, Snackbar.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;&#10;            // Mostrar loading&#10;            btnLogin.setEnabled(false);&#10;            btnLogin.setText(&quot;Iniciando sesión...&quot;);&#10;&#10;            loginWithFirebase(email, password);&#10;        });&#10;&#10;        registerRedirect = findViewById(R.id.registerRedirect);&#10;        registerRedirect.setOnClickListener(reg -&gt; {&#10;            Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);&#10;            startActivity(intent);&#10;            finish();&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.loginMain), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    private void loginWithFirebase(String email, String password) {&#10;        mAuth.signInWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Login exitoso - cargar datos del usuario&#10;                        FirebaseUser user = mAuth.getCurrentUser();&#10;                        Snackbar.make(loginMain, &quot;Bienvenido &quot; + user.getEmail(), Snackbar.LENGTH_SHORT).show();&#10;                        loadUserDataAndNavigate();&#10;                    } else {&#10;                        // Login falló&#10;                        Snackbar.make(loginMain, &quot;Usuario y/o contraseña inválidos&quot;, Snackbar.LENGTH_SHORT).show();&#10;                        btnLogin.setEnabled(true);&#10;                        btnLogin.setText(&quot;Iniciar Sesión&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void loadUserDataAndNavigate() {&#10;        // Inicializar SQLite con el contexto&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        generarData.initializeWithContext(this);&#10;&#10;        // Intentar restaurar datos desde Firestore (opcional, no bloquea la navegación)&#10;        firestoreRepository.restoreDataFromFirestore(new FirestoreRepository.DataSyncCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                // Datos restaurados exitosamente desde Firestore&#10;                navigateToMainActivity();&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                // Si falla la restauración, usar datos locales SQLite&#10;                Log.d(&quot;LoginActivity&quot;, &quot;No se pudieron restaurar datos desde Firestore, usando datos locales: &quot; + error);&#10;                navigateToMainActivity();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void navigateToMainActivity() {&#10;        Intent intent = new Intent(LoginActivity.this, MainActivity.class);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    protected void onStart() {&#10;        super.onStart();&#10;        // Verificar si el usuario ya está logueado&#10;        FirebaseUser currentUser = mAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            // Usuario ya está logueado, cargar datos y navegar&#10;            loadUserDataAndNavigate();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/MainActivity.java" />
              <option name="originalContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.view.View;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.GravityCompat;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.drawerlayout.widget.DrawerLayout;&#10;import androidx.fragment.app.Fragment;&#10;import com.google.android.material.navigation.NavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.sgionotes.R;&#10;import com.sgionotes.fragments.NoteFragment;&#10;import com.sgionotes.fragments.NotePrivateFragment;&#10;import com.sgionotes.fragments.TagFragment;&#10;import com.sgionotes.fragments.TrashFragment;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;import com.sgionotes.models.GenerarData;&#10;&#10;import java.util.Objects;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private DrawerLayout drawerLayout;&#10;    private NavigationView navigationView;&#10;    private ActionBarDrawerToggle toggle;&#10;    private FirebaseAuth mAuth;&#10;    private FirestoreRepository firestoreRepository;&#10;    private Handler saveHandler;&#10;    private Runnable saveRunnable;&#10;&#10;    private NoteFragment notes = new NoteFragment();&#10;    private TagFragment tags = new TagFragment();&#10;    private TrashFragment trash = new TrashFragment();&#10;    private NotePrivateFragment tagsPrivate = new NotePrivateFragment();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // FirebaseRepository y Firebase Auth&#10;        mAuth = FirebaseAuth.getInstance();&#10;        firestoreRepository = new FirestoreRepository(this);&#10;&#10;        // GenerarData Sqlite&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        generarData.initializeWithContext(this);&#10;&#10;        // Auto guardado de datos&#10;        setupAutoSave();&#10;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        Objects.requireNonNull(getSupportActionBar()).setDisplayShowTitleEnabled(false);&#10;&#10;        drawerLayout = findViewById(R.id.drawer_layout);&#10;        navigationView = findViewById(R.id.nav_view);&#10;&#10;        toggle = new ActionBarDrawerToggle(&#10;                this, drawerLayout, toolbar,&#10;                R.string.navigation_drawer_open,&#10;                R.string.navigation_drawer_close&#10;        );&#10;        drawerLayout.addDrawerListener(toggle);&#10;        toggle.syncState();&#10;&#10;        loadFragment(notes);&#10;&#10;        navigationView.setNavigationItemSelectedListener(item -&gt; {&#10;            int id = item.getItemId();&#10;&#10;            drawerLayout.closeDrawer(GravityCompat.START);&#10;&#10;            new Handler(Looper.getMainLooper()).postDelayed(() -&gt; {&#10;                if (id == R.id.notes) {&#10;                    loadFragment(notes);&#10;                } else if (id == R.id.tags) {&#10;                    loadFragment(tags);&#10;                } else if (id == R.id.trash) {&#10;                    loadFragment(trash);&#10;                }&#10;                else if (id == R.id.btnLogout) {&#10;                    logoutUser();&#10;                }&#10;//                else if (id == R.id.tags_private) {&#10;//                    loadFragment(tagsPrivate);&#10;//                }&#10;            }, 300);&#10;&#10;            return true;&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main_content), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    private void setupAutoSave() {&#10;        saveHandler = new Handler(Looper.getMainLooper());&#10;        saveRunnable = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                saveUserDataToFirestore();&#10;                // RepeticionDelGuardado&#10;                saveHandler.postDelayed(this, 30000);&#10;            }&#10;        };&#10;        // IniciarAutoGuardado&#10;        saveHandler.postDelayed(saveRunnable, 30000);&#10;    }&#10;&#10;    private void saveUserDataToFirestore() {&#10;        if (mAuth.getCurrentUser() != null) {&#10;            //Sqlite backup&#10;            firestoreRepository.backupLocalDataToFirestore(new FirestoreRepository.DataSyncCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Error Respaldo&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void logoutUser() {&#10;        // Guardado Cerrar sesion&#10;        saveUserDataToFirestore();&#10;        mAuth.signOut();&#10;&#10;        // LoginActivity&#10;        Intent intent = new Intent(MainActivity.this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    public void loadFragment(Fragment fragment) {&#10;        getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.contenedor, fragment)&#10;                .commit();&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        // GuardarAlSuspederSesion&#10;        saveUserDataToFirestore();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (saveHandler != null &amp;&amp; saveRunnable != null) {&#10;            saveHandler.removeCallbacks(saveRunnable);&#10;        }&#10;        saveUserDataToFirestore();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.view.View;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.GravityCompat;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.drawerlayout.widget.DrawerLayout;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.navigation.NavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.sgionotes.R;&#10;import com.sgionotes.dialogs.ProfileIconDialog;&#10;import com.sgionotes.fragments.NoteFragment;&#10;import com.sgionotes.fragments.NotePrivateFragment;&#10;import com.sgionotes.fragments.TagFragment;&#10;import com.sgionotes.fragments.TrashFragment;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.UserProfile;&#10;import com.sgionotes.repository.FirestoreRepository;&#10;import com.sgionotes.utils.UserProfileManager;&#10;&#10;import java.util.Objects;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private DrawerLayout drawerLayout;&#10;    private NavigationView navigationView;&#10;    private ActionBarDrawerToggle toggle;&#10;    private FirebaseAuth mAuth;&#10;    private FirestoreRepository firestoreRepository;&#10;    private Handler saveHandler;&#10;    private Runnable saveRunnable;&#10;&#10;    private NoteFragment notes = new NoteFragment();&#10;    private TagFragment tags = new TagFragment();&#10;    private TrashFragment trash = new TrashFragment();&#10;    private NotePrivateFragment tagsPrivate = new NotePrivateFragment();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // FirebaseRepository y Firebase Auth&#10;        mAuth = FirebaseAuth.getInstance();&#10;        firestoreRepository = new FirestoreRepository(this);&#10;&#10;        // GenerarData Sqlite&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        generarData.initializeWithContext(this);&#10;&#10;        // Auto guardado de datos&#10;        setupAutoSave();&#10;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        Objects.requireNonNull(getSupportActionBar()).setDisplayShowTitleEnabled(false);&#10;&#10;        drawerLayout = findViewById(R.id.drawer_layout);&#10;        navigationView = findViewById(R.id.nav_view);&#10;&#10;        toggle = new ActionBarDrawerToggle(&#10;                this, drawerLayout, toolbar,&#10;                R.string.navigation_drawer_open,&#10;                R.string.navigation_drawer_close&#10;        );&#10;        drawerLayout.addDrawerListener(toggle);&#10;        toggle.syncState();&#10;&#10;        loadFragment(notes);&#10;&#10;        navigationView.setNavigationItemSelectedListener(item -&gt; {&#10;            int id = item.getItemId();&#10;&#10;            drawerLayout.closeDrawer(GravityCompat.START);&#10;&#10;            new Handler(Looper.getMainLooper()).postDelayed(() -&gt; {&#10;                if (id == R.id.notes) {&#10;                    loadFragment(notes);&#10;                } else if (id == R.id.tags) {&#10;                    loadFragment(tags);&#10;                } else if (id == R.id.trash) {&#10;                    loadFragment(trash);&#10;                }&#10;                else if (id == R.id.btnLogout) {&#10;                    logoutUser();&#10;                }&#10;//                else if (id == R.id.tags_private) {&#10;//                    loadFragment(tagsPrivate);&#10;//                }&#10;            }, 300);&#10;&#10;            return true;&#10;        });&#10;&#10;        // Configurar perfil de usuario en el drawer&#10;        setupUserProfile();&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main_content), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    private void setupAutoSave() {&#10;        saveHandler = new Handler(Looper.getMainLooper());&#10;        saveRunnable = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                saveUserDataToFirestore();&#10;                // RepeticionDelGuardado&#10;                saveHandler.postDelayed(this, 30000);&#10;            }&#10;        };&#10;        // IniciarAutoGuardado&#10;        saveHandler.postDelayed(saveRunnable, 30000);&#10;    }&#10;&#10;    private void saveUserDataToFirestore() {&#10;        if (mAuth.getCurrentUser() != null) {&#10;            //Sqlite backup&#10;            firestoreRepository.backupLocalDataToFirestore(new FirestoreRepository.DataSyncCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Error Respaldo&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void logoutUser() {&#10;        // Guardado Cerrar sesion&#10;        saveUserDataToFirestore();&#10;        mAuth.signOut();&#10;&#10;        // LoginActivity&#10;        Intent intent = new Intent(MainActivity.this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    public void loadFragment(Fragment fragment) {&#10;        getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.contenedor, fragment)&#10;                .commit();&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        // GuardarAlSuspederSesion&#10;        saveUserDataToFirestore();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (saveHandler != null &amp;&amp; saveRunnable != null) {&#10;            saveHandler.removeCallbacks(saveRunnable);&#10;        }&#10;        saveUserDataToFirestore();&#10;    }&#10;&#10;    private void setupUserProfile() {&#10;        View headerView = navigationView.getHeaderView(0);&#10;        ImageView imgProfileIcon = headerView.findViewById(R.id.imgProfileIcon);&#10;        ImageView imgEditIcon = headerView.findViewById(R.id.imgEditIcon);&#10;        TextView txtUserName = headerView.findViewById(R.id.txtUserName);&#10;        TextView txtUserEmail = headerView.findViewById(R.id.txtUserEmail);&#10;&#10;        // Cargar información del perfil&#10;        loadUserProfile(imgProfileIcon, txtUserName, txtUserEmail);&#10;&#10;        // Configurar click en el icono de perfil para mostrar edición&#10;        imgProfileIcon.setOnClickListener(v -&gt; {&#10;            imgEditIcon.setVisibility(View.VISIBLE);&#10;            // Ocultar después de 2 segundos&#10;            new Handler(Looper.getMainLooper()).postDelayed(() -&gt; {&#10;                imgEditIcon.setVisibility(View.GONE);&#10;            }, 2000);&#10;        });&#10;&#10;        // Configurar click en el icono de editar&#10;        imgEditIcon.setOnClickListener(v -&gt; showProfileIconDialog(imgProfileIcon, txtUserName, txtUserEmail));&#10;&#10;        // También permitir click en toda la card para editar&#10;        headerView.findViewById(R.id.cardProfileIcon).setOnClickListener(v -&gt;&#10;                showProfileIconDialog(imgProfileIcon, txtUserName, txtUserEmail));&#10;    }&#10;&#10;    private void loadUserProfile(ImageView imgProfileIcon, TextView txtUserName, TextView txtUserEmail) {&#10;        UserProfileManager profileManager = new UserProfileManager(this);&#10;        UserProfile profile = profileManager.getUserProfile();&#10;&#10;        // Actualizar UI con información del perfil&#10;        imgProfileIcon.setImageResource(profile.getProfileIcon());&#10;        txtUserName.setText(profile.getFullName());&#10;&#10;        // Si no hay email guardado, usar el de Firebase&#10;        String email = profile.getEmail();&#10;        if (email.isEmpty() &amp;&amp; mAuth.getCurrentUser() != null) {&#10;            email = mAuth.getCurrentUser().getEmail();&#10;            // Actualizar el perfil con el email de Firebase&#10;            profile.setEmail(email);&#10;            profileManager.saveUserProfile(profile);&#10;        }&#10;        txtUserEmail.setText(email);&#10;    }&#10;&#10;    private void showProfileIconDialog(ImageView imgProfileIcon, TextView txtUserName, TextView txtUserEmail) {&#10;        ProfileIconDialog.showIconSelectionDialog(this, selectedIcon -&gt; {&#10;            // Usuario seleccionó un nuevo icono&#10;            UserProfileManager profileManager = new UserProfileManager(this);&#10;            UserProfile profile = profileManager.getUserProfile();&#10;&#10;            // Actualizar icono del perfil&#10;            profile.setProfileIcon(selectedIcon);&#10;            profileManager.saveUserProfile(profile);&#10;&#10;            // Actualizar UI&#10;            imgProfileIcon.setImageResource(selectedIcon);&#10;&#10;            // Mostrar mensaje de confirmación&#10;            // Snackbar.make(findViewById(R.id.main_content), &quot;Icono de perfil actualizado&quot;, Snackbar.LENGTH_SHORT).show();&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/RegisterActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/RegisterActivity.java" />
              <option name="originalContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.UserProfile;&#10;import com.sgionotes.utils.UserProfileManager;&#10;&#10;import java.util.regex.Pattern;&#10;&#10;public class RegisterActivity extends AppCompatActivity {&#10;&#10;    private TextView txtLoginRedirect;&#10;    private EditText txtNombres;&#10;    private EditText txtApellidos;&#10;    private EditText txtCorreo;&#10;    private EditText txtPassword;&#10;    private LinearLayout registerMain;&#10;    private Button btnRegister;&#10;    private FirebaseAuth mAuth;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_register);&#10;&#10;        // Inicializar Firebase Auth&#10;        mAuth = FirebaseAuth.getInstance();&#10;&#10;        txtNombres = findViewById(R.id.txtNombres);&#10;        txtApellidos = findViewById(R.id.txtApellidos);&#10;        txtCorreo = findViewById(R.id.txtCorreo);&#10;        txtPassword = findViewById(R.id.txtPassword);&#10;        txtLoginRedirect = findViewById(R.id.loginRedirect);&#10;        registerMain = findViewById(R.id.registerMain);&#10;        btnRegister = findViewById(R.id.btnRegister);&#10;&#10;        txtLoginRedirect.setOnClickListener(btn -&gt; {&#10;            Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);&#10;            startActivity(intent);&#10;            finish();&#10;        });&#10;&#10;        btnRegister.setOnClickListener(btn -&gt; {&#10;            if (validacionRegister()) {&#10;                // Mostrar loading&#10;                btnRegister.setEnabled(false);&#10;                btnRegister.setText(&quot;Creando cuenta...&quot;);&#10;&#10;                String email = txtCorreo.getText().toString().trim();&#10;                String password = txtPassword.getText().toString();&#10;&#10;                registerWithFirebase(email, password);&#10;            }&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.registerMain), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    private void registerWithFirebase(String email, String password) {&#10;        mAuth.createUserWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Registro exitoso - guardar perfil del usuario&#10;                        saveUserProfile();&#10;&#10;                        Snackbar.make(registerMain, &quot;Cuenta creada exitosamente&quot;, Snackbar.LENGTH_SHORT).show();&#10;                        Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);&#10;                        intent.putExtra(&quot;registro_exitoso&quot;, true);&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } else {&#10;                        // Registro falló&#10;                        String errorMessage = &quot;Error al crear la cuenta&quot;;&#10;                        if (task.getException() != null) {&#10;                            String exception = task.getException().getMessage();&#10;                            if (exception.contains(&quot;email address is already in use&quot;)) {&#10;                                errorMessage = &quot;Este correo ya está registrado&quot;;&#10;                            } else if (exception.contains(&quot;weak password&quot;)) {&#10;                                errorMessage = &quot;La contraseña es muy débil&quot;;&#10;                            }&#10;                        }&#10;                        Snackbar.make(registerMain, errorMessage, Snackbar.LENGTH_LONG).show();&#10;                        btnRegister.setEnabled(true);&#10;                        btnRegister.setText(&quot;Registrarse&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void saveUserProfile() {&#10;        UserProfileManager profileManager = new UserProfileManager(this);&#10;&#10;        String nombres = txtNombres.getText().toString().trim();&#10;        String apellidos = txtApellidos.getText().toString().trim();&#10;        String email = txtCorreo.getText().toString().trim();&#10;&#10;        // Crear perfil con icono por defecto&#10;        UserProfile profile = new UserProfile(nombres, apellidos, email, R.drawable.outline_account_circle_24);&#10;        profileManager.saveUserProfile(profile);&#10;    }&#10;&#10;    private boolean validacionRegister() {&#10;&#10;        String nombres = txtNombres.getText().toString().trim();&#10;        String apellidos = txtApellidos.getText().toString().trim();&#10;        String correo = txtCorreo.getText().toString().trim();&#10;        String password = txtPassword.getText().toString();&#10;&#10;        if (nombres.isEmpty() || apellidos.isEmpty() || correo.isEmpty() || password.isEmpty()) {&#10;            Snackbar.make(registerMain, &quot;Todos los campos son obligatorios&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        if (nombres.length() &gt; 80 || apellidos.length() &gt; 80) {&#10;            Snackbar.make(registerMain, &quot;Nombres y apellidos deben tener máximo 80 caracteres&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        Pattern patternCorreo = Pattern.compile(&quot;^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$&quot;);&#10;        if (!patternCorreo.matcher(correo).matches()) {&#10;            Snackbar.make(registerMain, &quot;Correo no válido&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        if (password.length() &lt; 8 || password.length() &gt; 50) {&#10;            Snackbar.make(registerMain, &quot;La contraseña debe tener entre 8 y 50 caracteres&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        Pattern patternPassword = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&amp;*()_+\\-=\\[\\]{};':\&quot;\\\\|,.&lt;&gt;/?]).+$&quot;);&#10;        if (!patternPassword.matcher(password).matches()) {&#10;            Snackbar.make(registerMain, &quot;La contraseña debe tener mayúsculas, minúsculas, número y carácter especial&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.UserProfile;&#10;import com.sgionotes.utils.UserProfileManager;&#10;&#10;import java.util.regex.Pattern;&#10;&#10;public class RegisterActivity extends AppCompatActivity {&#10;&#10;    private TextView txtLoginRedirect;&#10;    private EditText txtNombres;&#10;    private EditText txtApellidos;&#10;    private EditText txtCorreo;&#10;    private EditText txtPassword;&#10;    private LinearLayout registerMain;&#10;    private Button btnRegister;&#10;    private FirebaseAuth mAuth;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_register);&#10;&#10;        // Inicializar Firebase Auth&#10;        mAuth = FirebaseAuth.getInstance();&#10;&#10;        txtNombres = findViewById(R.id.txtNombres);&#10;        txtApellidos = findViewById(R.id.txtApellidos);&#10;        txtCorreo = findViewById(R.id.txtCorreo);&#10;        txtPassword = findViewById(R.id.txtPassword);&#10;        txtLoginRedirect = findViewById(R.id.loginRedirect);&#10;        registerMain = findViewById(R.id.registerMain);&#10;        btnRegister = findViewById(R.id.btnRegister);&#10;&#10;        txtLoginRedirect.setOnClickListener(btn -&gt; {&#10;            Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);&#10;            startActivity(intent);&#10;            finish();&#10;        });&#10;&#10;        btnRegister.setOnClickListener(btn -&gt; {&#10;            if (validacionRegister()) {&#10;                // Mostrar loading&#10;                btnRegister.setEnabled(false);&#10;                btnRegister.setText(&quot;Creando cuenta...&quot;);&#10;&#10;                String email = txtCorreo.getText().toString().trim();&#10;                String password = txtPassword.getText().toString();&#10;&#10;                registerWithFirebase(email, password);&#10;            }&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.registerMain), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    private void registerWithFirebase(String email, String password) {&#10;        mAuth.createUserWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Registro exitoso - guardar perfil del usuario&#10;                        saveUserProfile();&#10;&#10;                        Snackbar.make(registerMain, &quot;Cuenta creada exitosamente&quot;, Snackbar.LENGTH_SHORT).show();&#10;                        Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);&#10;                        intent.putExtra(&quot;registro_exitoso&quot;, true);&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } else {&#10;                        // Registro falló&#10;                        String errorMessage = &quot;Error al crear la cuenta&quot;;&#10;                        if (task.getException() != null) {&#10;                            String exception = task.getException().getMessage();&#10;                            if (exception.contains(&quot;email address is already in use&quot;)) {&#10;                                errorMessage = &quot;Este correo ya está registrado&quot;;&#10;                            } else if (exception.contains(&quot;weak password&quot;)) {&#10;                                errorMessage = &quot;La contraseña es muy débil&quot;;&#10;                            }&#10;                        }&#10;                        Snackbar.make(registerMain, errorMessage, Snackbar.LENGTH_LONG).show();&#10;                        btnRegister.setEnabled(true);&#10;                        btnRegister.setText(&quot;Registrarse&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void saveUserProfile() {&#10;        UserProfileManager profileManager = new UserProfileManager(this);&#10;&#10;        String nombres = txtNombres.getText().toString().trim();&#10;        String apellidos = txtApellidos.getText().toString().trim();&#10;        String email = txtCorreo.getText().toString().trim();&#10;&#10;        // Crear perfil con icono Person por defecto&#10;        UserProfile profile = new UserProfile(nombres, apellidos, email, R.drawable.ic_person_24);&#10;        profileManager.saveUserProfile(profile);&#10;    }&#10;&#10;    private boolean validacionRegister() {&#10;&#10;        String nombres = txtNombres.getText().toString().trim();&#10;        String apellidos = txtApellidos.getText().toString().trim();&#10;        String correo = txtCorreo.getText().toString().trim();&#10;        String password = txtPassword.getText().toString();&#10;&#10;        if (nombres.isEmpty() || apellidos.isEmpty() || correo.isEmpty() || password.isEmpty()) {&#10;            Snackbar.make(registerMain, &quot;Todos los campos son obligatorios&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        if (nombres.length() &gt; 80 || apellidos.length() &gt; 80) {&#10;            Snackbar.make(registerMain, &quot;Nombres y apellidos deben tener máximo 80 caracteres&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        Pattern patternCorreo = Pattern.compile(&quot;^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$&quot;);&#10;        if (!patternCorreo.matcher(correo).matches()) {&#10;            Snackbar.make(registerMain, &quot;Correo no válido&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        if (password.length() &lt; 8 || password.length() &gt; 50) {&#10;            Snackbar.make(registerMain, &quot;La contraseña debe tener entre 8 y 50 caracteres&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        Pattern patternPassword = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&amp;*()_+\\-=\\[\\]{};':\&quot;\\\\|,.&lt;&gt;/?]).+$&quot;);&#10;        if (!patternPassword.matcher(password).matches()) {&#10;            Snackbar.make(registerMain, &quot;La contraseña debe tener mayúsculas, minúsculas, número y carácter especial&quot;, Snackbar.LENGTH_LONG).show();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/TagsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/activities/TagsActivity.java" />
              <option name="originalContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.EditableTagAdapter;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TagsActivity extends AppCompatActivity implements EditableTagAdapter.OnTagActionListener {&#10;&#10;    private RecyclerView recyclerViewTags;&#10;    private EditableTagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; tagsNota;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_tags);&#10;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Edición de Etiquetas&quot;);&#10;        }&#10;&#10;        recyclerViewTags = findViewById(R.id.recyclerViewTags);&#10;        recyclerViewTags.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        Intent intent = getIntent();&#10;        if (intent != null) {&#10;            ArrayList&lt;String&gt; tagsTexto = intent.getStringArrayListExtra(&quot;tags&quot;);&#10;            if (tagsTexto != null) {&#10;                tagsNota = new ArrayList&lt;&gt;();&#10;                for (String tagTexto : tagsTexto) {&#10;                    tagsNota.add(new Tag(tagTexto));&#10;                }&#10;                // CargarFavoritos&#10;                GenerarData.getInstance().loadFavorites(this);&#10;                setupRecyclerView();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        // GuardarFavoritos&#10;        GenerarData.getInstance().saveFavorites(this);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        tagAdapter = new EditableTagAdapter(this, tagsNota, this);&#10;        recyclerViewTags.setAdapter(tagAdapter);&#10;    }&#10;&#10;    @Override&#10;    public void onTagEdited(int position, String newText) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            tagsNota.get(position).setEtiquetaDescripcion(newText);&#10;            tagAdapter.notifyItemChanged(position);&#10;            Toast.makeText(this, &quot;Etiqueta actualizada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagDeleted(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            tagsNota.remove(position);&#10;            tagAdapter.notifyItemRemoved(position);&#10;            Toast.makeText(this, &quot;Etiqueta '&quot; + tagName + &quot;' eliminada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagAddedToFavorites(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            Toast.makeText(this, &quot;'&quot; + tagName + &quot;' añadida a favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        getOnBackPressedDispatcher().onBackPressed();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.EditableTagAdapter;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TagsActivity extends AppCompatActivity implements EditableTagAdapter.OnTagActionListener {&#10;&#10;    private RecyclerView recyclerViewTags;&#10;    private EditableTagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; tagsNota;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_tags);&#10;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Edición de Etiquetas&quot;);&#10;        }&#10;&#10;        recyclerViewTags = findViewById(R.id.recyclerViewTags);&#10;        recyclerViewTags.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        Intent intent = getIntent();&#10;        if (intent != null) {&#10;            ArrayList&lt;String&gt; tagsTexto = intent.getStringArrayListExtra(&quot;tags&quot;);&#10;            if (tagsTexto != null) {&#10;                tagsNota = new ArrayList&lt;&gt;();&#10;                for (String tagTexto : tagsTexto) {&#10;                    tagsNota.add(new Tag(tagTexto));&#10;                }&#10;                GenerarData.getInstance().loadFavorites(this);&#10;                setupRecyclerView();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onPause() {&#10;        super.onPause();&#10;        GenerarData.getInstance().saveFavorites(this);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        tagAdapter = new EditableTagAdapter(this, tagsNota, this);&#10;        recyclerViewTags.setAdapter(tagAdapter);&#10;    }&#10;&#10;    @Override&#10;    public void onTagEdited(int position, String newText) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            tagsNota.get(position).setEtiquetaDescripcion(newText);&#10;            tagAdapter.notifyItemChanged(position);&#10;            Toast.makeText(this, &quot;Etiqueta actualizada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagDeleted(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            tagsNota.remove(position);&#10;            tagAdapter.notifyItemRemoved(position);&#10;            Toast.makeText(this, &quot;Etiqueta '&quot; + tagName + &quot;' eliminada&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onTagAddedToFavorites(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; tagsNota.size()) {&#10;            String tagName = tagsNota.get(position).getEtiquetaDescripcion();&#10;            Toast.makeText(this, &quot;'&quot; + tagName + &quot;' añadida a favoritas&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        getOnBackPressedDispatcher().onBackPressed();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/AppDatabase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/AppDatabase.java" />
              <option name="updatedContent" value="package com.sgionotes.database;&#10;&#10;import androidx.room.Database;&#10;import androidx.room.Room;&#10;import androidx.room.RoomDatabase;&#10;import android.content.Context;&#10;import com.sgionotes.database.dao.NoteDao;&#10;import com.sgionotes.database.dao.TagDao;&#10;import com.sgionotes.database.entities.NoteEntity;&#10;import com.sgionotes.database.entities.TagEntity;&#10;&#10;@Database(&#10;    entities = {NoteEntity.class, TagEntity.class},&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;public abstract class AppDatabase extends RoomDatabase {&#10;    &#10;    private static volatile AppDatabase INSTANCE;&#10;    private static final String DATABASE_NAME = &quot;smartgionotes_database&quot;;&#10;    &#10;    public abstract NoteDao noteDao();&#10;    public abstract TagDao tagDao();&#10;    &#10;    public static AppDatabase getDatabase(Context context) {&#10;        if (INSTANCE == null) {&#10;            synchronized (AppDatabase.class) {&#10;                if (INSTANCE == null) {&#10;                    INSTANCE = Room.databaseBuilder(&#10;                            context.getApplicationContext(),&#10;                            AppDatabase.class,&#10;                            DATABASE_NAME&#10;                    )&#10;                    .allowMainThreadQueries() // Solo para desarrollo, en producción usar AsyncTask o Room with coroutines&#10;                    .build();&#10;                }&#10;            }&#10;        }&#10;        return INSTANCE;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/dao/NoteDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/dao/NoteDao.java" />
              <option name="updatedContent" value="package com.sgionotes.database.dao;&#10;&#10;import androidx.room.Dao;&#10;import androidx.room.Delete;&#10;import androidx.room.Insert;&#10;import androidx.room.Query;&#10;import androidx.room.Update;&#10;import com.sgionotes.database.entities.NoteEntity;&#10;import java.util.List;&#10;&#10;@Dao&#10;public interface NoteDao {&#10;    &#10;    // Obtener todas las notas de un usuario (excluyendo papelera)&#10;    @Query(&quot;SELECT * FROM notes WHERE userId = :userId AND isTrash = 0 ORDER BY updatedAt DESC&quot;)&#10;    List&lt;NoteEntity&gt; getAllNotesByUser(String userId);&#10;    &#10;    // Obtener notas en papelera de un usuario&#10;    @Query(&quot;SELECT * FROM notes WHERE userId = :userId AND isTrash = 1 ORDER BY updatedAt DESC&quot;)&#10;    List&lt;NoteEntity&gt; getTrashNotesByUser(String userId);&#10;    &#10;    // Obtener todas las notas de un usuario (incluyendo papelera)&#10;    @Query(&quot;SELECT * FROM notes WHERE userId = :userId ORDER BY updatedAt DESC&quot;)&#10;    List&lt;NoteEntity&gt; getAllNotesIncludingTrash(String userId);&#10;    &#10;    // Buscar notas por título o contenido&#10;    @Query(&quot;SELECT * FROM notes WHERE userId = :userId AND isTrash = 0 AND (titulo LIKE :searchQuery OR contenido LIKE :searchQuery) ORDER BY updatedAt DESC&quot;)&#10;    List&lt;NoteEntity&gt; searchNotes(String userId, String searchQuery);&#10;    &#10;    // Obtener una nota específica&#10;    @Query(&quot;SELECT * FROM notes WHERE id = :noteId AND userId = :userId&quot;)&#10;    NoteEntity getNoteById(int noteId, String userId);&#10;    &#10;    // Insertar nueva nota&#10;    @Insert&#10;    long insertNote(NoteEntity note);&#10;    &#10;    // Actualizar nota existente&#10;    @Update&#10;    void updateNote(NoteEntity note);&#10;    &#10;    // Eliminar nota (físicamente)&#10;    @Delete&#10;    void deleteNote(NoteEntity note);&#10;    &#10;    // Mover nota a papelera&#10;    @Query(&quot;UPDATE notes SET isTrash = 1, updatedAt = :timestamp WHERE id = :noteId AND userId = :userId&quot;)&#10;    void moveToTrash(int noteId, String userId, long timestamp);&#10;    &#10;    // Restaurar nota de papelera&#10;    @Query(&quot;UPDATE notes SET isTrash = 0, updatedAt = :timestamp WHERE id = :noteId AND userId = :userId&quot;)&#10;    void restoreFromTrash(int noteId, String userId, long timestamp);&#10;    &#10;    // Eliminar todas las notas en papelera de un usuario&#10;    @Query(&quot;DELETE FROM notes WHERE userId = :userId AND isTrash = 1&quot;)&#10;    void emptyTrash(String userId);&#10;    &#10;    // Obtener conteo de notas de un usuario&#10;    @Query(&quot;SELECT COUNT(*) FROM notes WHERE userId = :userId AND isTrash = 0&quot;)&#10;    int getNotesCount(String userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/dao/TagDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/dao/TagDao.java" />
              <option name="updatedContent" value="package com.sgionotes.database.dao;&#10;&#10;import androidx.room.Dao;&#10;import androidx.room.Delete;&#10;import androidx.room.Insert;&#10;import androidx.room.Query;&#10;import androidx.room.Update;&#10;import com.sgionotes.database.entities.TagEntity;&#10;import java.util.List;&#10;&#10;@Dao&#10;public interface TagDao {&#10;    &#10;    // Obtener todas las etiquetas de un usuario&#10;    @Query(&quot;SELECT * FROM tags WHERE userId = :userId ORDER BY isFavorite DESC, favoriteTimestamp ASC, descripcion ASC&quot;)&#10;    List&lt;TagEntity&gt; getAllTagsByUser(String userId);&#10;    &#10;    // Obtener etiquetas favoritas de un usuario&#10;    @Query(&quot;SELECT * FROM tags WHERE userId = :userId AND isFavorite = 1 ORDER BY favoriteTimestamp ASC&quot;)&#10;    List&lt;TagEntity&gt; getFavoriteTagsByUser(String userId);&#10;    &#10;    // Buscar etiquetas por descripción&#10;    @Query(&quot;SELECT * FROM tags WHERE userId = :userId AND descripcion LIKE :searchQuery ORDER BY isFavorite DESC, descripcion ASC&quot;)&#10;    List&lt;TagEntity&gt; searchTags(String userId, String searchQuery);&#10;    &#10;    // Obtener una etiqueta específica&#10;    @Query(&quot;SELECT * FROM tags WHERE id = :tagId AND userId = :userId&quot;)&#10;    TagEntity getTagById(int tagId, String userId);&#10;    &#10;    // Obtener etiqueta por descripción&#10;    @Query(&quot;SELECT * FROM tags WHERE descripcion = :descripcion AND userId = :userId&quot;)&#10;    TagEntity getTagByDescription(String descripcion, String userId);&#10;    &#10;    // Insertar nueva etiqueta&#10;    @Insert&#10;    long insertTag(TagEntity tag);&#10;    &#10;    // Actualizar etiqueta existente&#10;    @Update&#10;    void updateTag(TagEntity tag);&#10;    &#10;    // Eliminar etiqueta&#10;    @Delete&#10;    void deleteTag(TagEntity tag);&#10;    &#10;    // Marcar/desmarcar etiqueta como favorita&#10;    @Query(&quot;UPDATE tags SET isFavorite = :isFavorite, favoriteTimestamp = :timestamp WHERE id = :tagId AND userId = :userId&quot;)&#10;    void setFavorite(int tagId, String userId, boolean isFavorite, long timestamp);&#10;    &#10;    // Obtener conteo de etiquetas de un usuario&#10;    @Query(&quot;SELECT COUNT(*) FROM tags WHERE userId = :userId&quot;)&#10;    int getTagsCount(String userId);&#10;    &#10;    // Verificar si existe una etiqueta con esa descripción&#10;    @Query(&quot;SELECT EXISTS(SELECT 1 FROM tags WHERE descripcion = :descripcion AND userId = :userId)&quot;)&#10;    boolean tagExists(String descripcion, String userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/entities/NoteEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/entities/NoteEntity.java" />
              <option name="originalContent" value="package com.sgionotes.database.entities;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;notes&quot;)&#10;public class NoteEntity {&#10;&#10;    @PrimaryKey(autoGenerate = true)&#10;    private int id;&#10;&#10;    private String titulo;&#10;    private String contenido;&#10;    private String tags; // JSON string de las etiquetas&#10;    private boolean isTrash;&#10;    private long createdAt;&#10;    private long updatedAt;&#10;    private String userId; // Para asociar con el usuario de Firebase&#10;&#10;    public NoteEntity() {&#10;        this.createdAt = System.currentTimeMillis();&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public NoteEntity(String titulo, String contenido, String tags, boolean isTrash, String userId) {&#10;        this.titulo = titulo;&#10;        this.contenido = contenido;&#10;        this.tags = tags;&#10;        this.isTrash = isTrash;&#10;        this.userId = userId;&#10;        this.createdAt = System.currentTimeMillis();&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() { return id; }&#10;    public void setId(int id) { this.id = id; }&#10;&#10;    public String getTitulo() { return titulo; }&#10;    public void setTitulo(String titulo) {&#10;        this.titulo = titulo;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public String getContenido() { return contenido; }&#10;    public void setContenido(String contenido) {&#10;        this.contenido = contenido;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public String getTags() { return tags; }&#10;    public void setTags(String tags) {&#10;        this.tags = tags;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public boolean isTrash() { return isTrash; }&#10;    public void setTrash(boolean trash) {&#10;        isTrash = trash;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public long getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(long createdAt) { this.createdAt = createdAt; }&#10;&#10;    public long getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(long updatedAt) { this.updatedAt = updatedAt; }&#10;&#10;    public String getUserId() { return userId; }&#10;    public void setUserId(String userId) { this.userId = userId; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.database.entities;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.Ignore;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;notes&quot;)&#10;public class NoteEntity {&#10;&#10;    @PrimaryKey(autoGenerate = true)&#10;    private int id;&#10;&#10;    private String titulo;&#10;    private String contenido;&#10;    private String tags; // JSON string de las etiquetas&#10;    private boolean isTrash;&#10;    private long createdAt;&#10;    private long updatedAt;&#10;    private String userId; // Para asociar con el usuario de Firebase&#10;&#10;    public NoteEntity() {&#10;        this.createdAt = System.currentTimeMillis();&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    @Ignore&#10;    public NoteEntity(String titulo, String contenido, String tags, boolean isTrash, String userId) {&#10;        this.titulo = titulo;&#10;        this.contenido = contenido;&#10;        this.tags = tags;&#10;        this.isTrash = isTrash;&#10;        this.userId = userId;&#10;        this.createdAt = System.currentTimeMillis();&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() { return id; }&#10;    public void setId(int id) { this.id = id; }&#10;&#10;    public String getTitulo() { return titulo; }&#10;    public void setTitulo(String titulo) {&#10;        this.titulo = titulo;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public String getContenido() { return contenido; }&#10;    public void setContenido(String contenido) {&#10;        this.contenido = contenido;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public String getTags() { return tags; }&#10;    public void setTags(String tags) {&#10;        this.tags = tags;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public boolean isTrash() { return isTrash; }&#10;    public void setTrash(boolean trash) {&#10;        isTrash = trash;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public long getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(long createdAt) { this.createdAt = createdAt; }&#10;&#10;    public long getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(long updatedAt) { this.updatedAt = updatedAt; }&#10;&#10;    public String getUserId() { return userId; }&#10;    public void setUserId(String userId) { this.userId = userId; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/entities/TagEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/database/entities/TagEntity.java" />
              <option name="originalContent" value="package com.sgionotes.database.entities;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;tags&quot;)&#10;public class TagEntity {&#10;&#10;    @PrimaryKey(autoGenerate = true)&#10;    private int id;&#10;&#10;    private String descripcion;&#10;    private boolean isFavorite;&#10;    private long favoriteTimestamp;&#10;    private String userId; // Para asociar con el usuario de Firebase&#10;&#10;    public TagEntity() {}&#10;&#10;    public TagEntity(String descripcion, String userId) {&#10;        this.descripcion = descripcion;&#10;        this.userId = userId;&#10;        this.isFavorite = false;&#10;        this.favoriteTimestamp = 0;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() { return id; }&#10;    public void setId(int id) { this.id = id; }&#10;&#10;    public String getDescripcion() { return descripcion; }&#10;    public void setDescripcion(String descripcion) { this.descripcion = descripcion; }&#10;&#10;    public boolean isFavorite() { return isFavorite; }&#10;    public void setFavorite(boolean favorite) { this.isFavorite = favorite; }&#10;&#10;    public long getFavoriteTimestamp() { return favoriteTimestamp; }&#10;    public void setFavoriteTimestamp(long favoriteTimestamp) { this.favoriteTimestamp = favoriteTimestamp; }&#10;&#10;    public String getUserId() { return userId; }&#10;    public void setUserId(String userId) { this.userId = userId; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.database.entities;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.Ignore;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;tags&quot;)&#10;public class TagEntity {&#10;&#10;    @PrimaryKey(autoGenerate = true)&#10;    private int id;&#10;&#10;    private String descripcion;&#10;    private boolean isFavorite;&#10;    private long favoriteTimestamp;&#10;    private String userId; // Para asociar con el usuario de Firebase&#10;&#10;    public TagEntity() {}&#10;&#10;    @Ignore&#10;    public TagEntity(String descripcion, String userId) {&#10;        this.descripcion = descripcion;&#10;        this.userId = userId;&#10;        this.isFavorite = false;&#10;        this.favoriteTimestamp = 0;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() { return id; }&#10;    public void setId(int id) { this.id = id; }&#10;&#10;    public String getDescripcion() { return descripcion; }&#10;    public void setDescripcion(String descripcion) { this.descripcion = descripcion; }&#10;&#10;    public boolean isFavorite() { return isFavorite; }&#10;    public void setFavorite(boolean favorite) { this.isFavorite = favorite; }&#10;&#10;    public long getFavoriteTimestamp() { return favoriteTimestamp; }&#10;    public void setFavoriteTimestamp(long favoriteTimestamp) { this.favoriteTimestamp = favoriteTimestamp; }&#10;&#10;    public String getUserId() { return userId; }&#10;    public void setUserId(String userId) { this.userId = userId; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/dialogs/ProfileIconDialog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/dialogs/ProfileIconDialog.java" />
              <option name="originalContent" value="package com.sgionotes.dialogs;&#10;&#10;import android.app.Dialog;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.sgionotes.R;&#10;import com.sgionotes.utils.UserProfileManager;&#10;&#10;public class ProfileIconDialog {&#10;&#10;    public interface OnIconSelectedListener {&#10;        void onIconSelected(int iconResId);&#10;    }&#10;&#10;    public static void showIconSelectionDialog(Context context, OnIconSelectedListener listener) {&#10;        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_profile_icons, null);&#10;&#10;        RecyclerView recyclerView = dialogView.findViewById(R.id.recyclerProfileIcons);&#10;        recyclerView.setLayoutManager(new GridLayoutManager(context, 3));&#10;&#10;        IconAdapter adapter = new IconAdapter(UserProfileManager.PROFILE_ICONS, listener);&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        new MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Selecciona tu icono de perfil&quot;)&#10;                .setView(dialogView)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private static class IconAdapter extends RecyclerView.Adapter&lt;IconAdapter.IconViewHolder&gt; {&#10;&#10;        private final int[] icons;&#10;        private final OnIconSelectedListener listener;&#10;&#10;        public IconAdapter(int[] icons, OnIconSelectedListener listener) {&#10;            this.icons = icons;&#10;            this.listener = listener;&#10;        }&#10;&#10;        @NonNull&#10;        @Override&#10;        public IconViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;            View view = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_profile_icon, parent, false);&#10;            return new IconViewHolder(view);&#10;        }&#10;&#10;        @Override&#10;        public void onBindViewHolder(@NonNull IconViewHolder holder, int position) {&#10;            int iconResId = icons[position];&#10;            holder.imageView.setImageResource(iconResId);&#10;&#10;            holder.itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onIconSelected(iconResId);&#10;                }&#10;            });&#10;        }&#10;&#10;        @Override&#10;        public int getItemCount() {&#10;            return icons.length;&#10;        }&#10;&#10;        static class IconViewHolder extends RecyclerView.ViewHolder {&#10;            ImageView imageView;&#10;&#10;            IconViewHolder(@NonNull View itemView) {&#10;                super(itemView);&#10;                imageView = itemView.findViewById(R.id.imgProfileIcon);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.dialogs;&#10;&#10;import android.app.Dialog;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.sgionotes.R;&#10;import com.sgionotes.utils.UserProfileManager;&#10;&#10;public class ProfileIconDialog {&#10;&#10;    public interface OnIconSelectedListener {&#10;        void onIconSelected(int iconResId);&#10;    }&#10;&#10;    public static void showIconSelectionDialog(Context context, OnIconSelectedListener listener) {&#10;        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_profile_icons, null);&#10;&#10;        RecyclerView recyclerView = dialogView.findViewById(R.id.recyclerProfileIcons);&#10;        recyclerView.setLayoutManager(new GridLayoutManager(context, 2));&#10;&#10;        IconAdapter adapter = new IconAdapter(UserProfileManager.PROFILE_ICONS, listener);&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        new MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Selecciona tu icono de perfil&quot;)&#10;                .setView(dialogView)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private static class IconAdapter extends RecyclerView.Adapter&lt;IconAdapter.IconViewHolder&gt; {&#10;&#10;        private final int[] icons;&#10;        private final OnIconSelectedListener listener;&#10;&#10;        public IconAdapter(int[] icons, OnIconSelectedListener listener) {&#10;            this.icons = icons;&#10;            this.listener = listener;&#10;        }&#10;&#10;        @NonNull&#10;        @Override&#10;        public IconViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;            View view = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_profile_icon, parent, false);&#10;            return new IconViewHolder(view);&#10;        }&#10;&#10;        @Override&#10;        public void onBindViewHolder(@NonNull IconViewHolder holder, int position) {&#10;            int iconResId = icons[position];&#10;            holder.imageView.setImageResource(iconResId);&#10;&#10;            holder.itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onIconSelected(iconResId);&#10;                }&#10;            });&#10;        }&#10;&#10;        @Override&#10;        public int getItemCount() {&#10;            return icons.length;&#10;        }&#10;&#10;        static class IconViewHolder extends RecyclerView.ViewHolder {&#10;            ImageView imageView;&#10;&#10;            IconViewHolder(@NonNull View itemView) {&#10;                super(itemView);&#10;                imageView = itemView.findViewById(R.id.imgProfileIcon);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/fragments/TagFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/fragments/TagFragment.java" />
              <option name="originalContent" value="package com.sgionotes.fragments;&#10;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.TagAdapter;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Tag;&#10;import java.util.List;&#10;&#10;public class TagFragment extends Fragment {&#10;&#10;    private RecyclerView recyclerTags;&#10;    private TagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private EditText txtTagNew;&#10;    private ImageView btnAddTag;&#10;&#10;    public TagFragment() {&#10;        listaEtiquetas = GenerarData.getInstance().getListaEtiquetas();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;&#10;        View vista = inflater.inflate(R.layout.fragment_tag, container, false);&#10;&#10;        recyclerTags = vista.findViewById(R.id.recyclerTags);&#10;        txtTagNew = vista.findViewById(R.id.txtTagNew);&#10;        btnAddTag = vista.findViewById(R.id.btnAddTag);&#10;&#10;        // CargaFavoritos&#10;        GenerarData.getInstance().loadFavorites(getContext());&#10;&#10;        recyclerTags.setLayoutManager(&#10;                new LinearLayoutManager(getContext())&#10;        );&#10;&#10;        btnAddTag.setOnClickListener(v -&gt; agregarEtiqueta());&#10;&#10;        txtTagNew.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_SEND) {&#10;                agregarEtiqueta();&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        tagAdapter = new TagAdapter(listaEtiquetas);&#10;        recyclerTags.setAdapter(tagAdapter);&#10;&#10;        return vista;&#10;&#10;    }&#10;&#10;    private void agregarEtiqueta() {&#10;        String texto = txtTagNew.getText().toString().trim();&#10;        if (!texto.isEmpty()) {&#10;            Tag nueva = new Tag(texto);&#10;            listaEtiquetas.add(0, nueva);&#10;            tagAdapter.notifyItemInserted(0);&#10;            recyclerTags.scrollToPosition(0);&#10;            txtTagNew.setText(&quot;&quot;);&#10;&#10;            // GuardarInmediatamenteetiquetas&#10;            GenerarData.getInstance().saveAllTags(getContext());&#10;&#10;            txtTagNew.clearFocus();&#10;            InputMethodManager imm = (InputMethodManager) requireContext().getSystemService(Context.INPUT_METHOD_SERVICE);&#10;            imm.hideSoftInputFromWindow(txtTagNew.getWindowToken(), 0);&#10;        } else {&#10;            Snackbar.make(recyclerTags, &quot;La etiqueta no puede estar vacía&quot;, Snackbar.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onPause() {&#10;        super.onPause();&#10;        // GuardarEtiquetasAutomaticamente&#10;        GenerarData.getInstance().saveAllTags(getContext());&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.sgionotes.fragments;&#10;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.view.inputmethod.EditorInfo;&#10;import android.view.inputmethod.InputMethodManager;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.sgionotes.R;&#10;import com.sgionotes.adapters.TagAdapter;&#10;import com.sgionotes.models.GenerarData;&#10;import com.sgionotes.models.Tag;&#10;import java.util.List;&#10;&#10;public class TagFragment extends Fragment {&#10;&#10;    private RecyclerView recyclerTags;&#10;    private TagAdapter tagAdapter;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private EditText txtTagNew;&#10;    private ImageView btnAddTag;&#10;&#10;    public TagFragment() {&#10;        listaEtiquetas = GenerarData.getInstance().getListaEtiquetas();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;&#10;        View vista = inflater.inflate(R.layout.fragment_tag, container, false);&#10;&#10;        recyclerTags = vista.findViewById(R.id.recyclerTags);&#10;        txtTagNew = vista.findViewById(R.id.txtTagNew);&#10;        btnAddTag = vista.findViewById(R.id.btnAddTag);&#10;&#10;        // CargaFavoritos&#10;        GenerarData.getInstance().loadFavorites(getContext());&#10;&#10;        recyclerTags.setLayoutManager(&#10;                new LinearLayoutManager(getContext())&#10;        );&#10;&#10;        btnAddTag.setOnClickListener(v -&gt; agregarEtiqueta());&#10;&#10;        txtTagNew.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == EditorInfo.IME_ACTION_SEND) {&#10;                agregarEtiqueta();&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;&#10;        tagAdapter = new TagAdapter(listaEtiquetas);&#10;        recyclerTags.setAdapter(tagAdapter);&#10;&#10;        return vista;&#10;&#10;    }&#10;&#10;    private void agregarEtiqueta() {&#10;        String texto = txtTagNew.getText().toString().trim();&#10;        if (!texto.isEmpty()) {&#10;            Tag nueva = new Tag(texto);&#10;            listaEtiquetas.add(0, nueva);&#10;            tagAdapter.notifyItemInserted(0);&#10;            recyclerTags.scrollToPosition(0);&#10;            txtTagNew.setText(&quot;&quot;);&#10;&#10;            txtTagNew.clearFocus();&#10;            InputMethodManager imm = (InputMethodManager) requireContext().getSystemService(Context.INPUT_METHOD_SERVICE);&#10;            imm.hideSoftInputFromWindow(txtTagNew.getWindowToken(), 0);&#10;        } else {&#10;            Snackbar.make(recyclerTags, &quot;La etiqueta no puede estar vacía&quot;, Snackbar.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onPause() {&#10;        super.onPause();&#10;        GenerarData.getInstance().saveFavorites(getContext());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/GenerarData.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/GenerarData.java" />
              <option name="originalContent" value="package com.sgionotes.models;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Set;&#10;import java.util.HashSet;&#10;&#10;public class GenerarData {&#10;&#10;    private static GenerarData instancia;&#10;    private List&lt;Note&gt; listaNotas;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private static final String PREFS_NAME = &quot;TagPreferences&quot;;&#10;    private static final String FAVORITES_KEY = &quot;favorites&quot;;&#10;    private static final String TIMESTAMPS_KEY = &quot;timestamps&quot;;&#10;    private static final String TAGS_KEY = &quot;all_tags&quot;;&#10;    private static final String TAG_SEPARATOR = &quot;||TAG_SEPARATOR||&quot;;&#10;&#10;    private GenerarData() {&#10;&#10;        listaNotas = new ArrayList&lt;&gt;();&#10;        listaEtiquetas = new ArrayList&lt;&gt;();&#10;&#10;        Tag tagTrabajo = new Tag(&quot;Trabajo&quot;);&#10;        Tag tagPersonal = new Tag(&quot;Personal&quot;);&#10;        Tag tagImportante = new Tag(&quot;Importante&quot;);&#10;        Tag tagIdeas = new Tag(&quot;Ideas&quot;);&#10;        Tag tagUrgente = new Tag(&quot;Urgente&quot;);&#10;&#10;        listaEtiquetas.add(tagTrabajo);&#10;        listaEtiquetas.add(tagPersonal);&#10;        listaEtiquetas.add(tagImportante);&#10;        listaEtiquetas.add(tagIdeas);&#10;        listaEtiquetas.add(tagUrgente);&#10;&#10;        listaNotas.add(new Note(1,&#10;                &quot;Lista de compras&quot;,&#10;                &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                Arrays.asList(tagPersonal),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(2,&#10;                &quot;Idea para proyecto&quot;,&#10;                &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                Arrays.asList(tagIdeas, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(3,&#10;                &quot;Cita médica&quot;,&#10;                &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                Arrays.asList(tagPersonal, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(4,&#10;                &quot;Plan de marketing&quot;,&#10;                &quot;Definir objetivos trimestrales, estudiar la competencia y proponer campañas.&quot;,&#10;                Arrays.asList(tagTrabajo),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(5,&#10;                &quot;Reunión con cliente&quot;,&#10;                &quot;No olvidar preparar la presentación y enviarla por correo antes del viernes.&quot;,&#10;                Arrays.asList(tagTrabajo, tagUrgente),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(6,&#10;                &quot;Lista de compras&quot;,&#10;                &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                Arrays.asList(tagPersonal),&#10;                true, true&#10;        ));&#10;        listaNotas.add(new Note(7,&#10;                &quot;Idea para proyecto&quot;,&#10;                &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                Arrays.asList(tagIdeas, tagImportante),&#10;                true, false&#10;        ));&#10;&#10;        listaNotas.add(new Note(8,&#10;                &quot;Cita médica&quot;,&#10;                &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                Arrays.asList(tagPersonal, tagImportante),&#10;                true, true&#10;        ));&#10;&#10;        listaNotas.add(new Note(9,&#10;                &quot;Plan de marketing&quot;,&#10;                &quot;Definir objetivos trimestrales, estudiar la competencia y proponer campañas.&quot;,&#10;                Arrays.asList(tagTrabajo),&#10;                true, true&#10;        ));&#10;&#10;    }&#10;&#10;    public List&lt;Note&gt; getListaNotas() {&#10;        return listaNotas;&#10;    }&#10;&#10;    public void setListaNotas(List&lt;Note&gt; listaNotas) {&#10;        this.listaNotas = listaNotas;&#10;    }&#10;&#10;    public List&lt;Tag&gt; getListaEtiquetas() {&#10;        return listaEtiquetas;&#10;    }&#10;&#10;    public void setListaEtiquetas(List&lt;Tag&gt; listaEtiquetas) {&#10;        this.listaEtiquetas = listaEtiquetas;&#10;    }&#10;&#10;    public static GenerarData getInstance() {&#10;        if (instancia == null) {&#10;            instancia = new GenerarData();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public static GenerarData getInstancia() {&#10;        if (instancia == null) {&#10;            instancia = new GenerarData();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public void loadFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        Set&lt;String&gt; favorites = prefs.getStringSet(FAVORITES_KEY, new HashSet&lt;&gt;());&#10;        &#10;        for (Tag tag : listaEtiquetas) {&#10;            String tagKey = tag.getEtiquetaDescripcion();&#10;            if (favorites.contains(tagKey)) {&#10;                long timestamp = prefs.getLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, System.currentTimeMillis());&#10;                tag.setFavorite(true);&#10;                tag.setFavoriteTimestamp(timestamp);&#10;            }&#10;        }&#10;        &#10;        sortTagsByFavorites();&#10;    }&#10;&#10;    private void sortTagsByFavorites() {&#10;        listaEtiquetas.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    public void saveFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;&#10;        Set&lt;String&gt; favorites = new HashSet&lt;&gt;();&#10;        for (Tag tag : listaEtiquetas) {&#10;            if (tag.isFavorite()) {&#10;                String tagKey = tag.getEtiquetaDescripcion();&#10;                favorites.add(tagKey);&#10;                editor.putLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, tag.getFavoriteTimestamp());&#10;            }&#10;        }&#10;&#10;        editor.putStringSet(FAVORITES_KEY, favorites);&#10;        editor.apply();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.models;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import com.sgionotes.repository.LocalRepository;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Set;&#10;import java.util.HashSet;&#10;&#10;public class GenerarData {&#10;&#10;    private static GenerarData instancia;&#10;    private LocalRepository localRepository;&#10;    private List&lt;Note&gt; listaNotas;&#10;    private List&lt;Tag&gt; listaEtiquetas;&#10;    private static final String PREFS_NAME = &quot;TagPreferences&quot;;&#10;    private static final String FAVORITES_KEY = &quot;favorites&quot;;&#10;    private static final String TIMESTAMPS_KEY = &quot;timestamps&quot;;&#10;    private static final String TAGS_KEY = &quot;all_tags&quot;;&#10;    private static final String TAG_SEPARATOR = &quot;||TAG_SEPARATOR||&quot;;&#10;&#10;    private GenerarData() {&#10;        listaNotas = new ArrayList&lt;&gt;();&#10;        listaEtiquetas = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public void initializeWithContext(Context context) {&#10;        if (localRepository == null) {&#10;            localRepository = new LocalRepository(context);&#10;            loadDataFromDatabase();&#10;            createDefaultDataIfEmpty();&#10;        }&#10;    }&#10;    &#10;    private void loadDataFromDatabase() {&#10;        if (localRepository != null) {&#10;            listaNotas = localRepository.getAllNotes();&#10;            listaEtiquetas = localRepository.getAllTags();&#10;        }&#10;    }&#10;    &#10;    private void createDefaultDataIfEmpty() {&#10;        if (localRepository == null) return;&#10;        &#10;        // Crear etiquetas por defecto si no existen&#10;        if (listaEtiquetas.isEmpty()) {&#10;            Tag tagTrabajo = new Tag(&quot;Trabajo&quot;);&#10;            Tag tagPersonal = new Tag(&quot;Personal&quot;);&#10;            Tag tagImportante = new Tag(&quot;Importante&quot;);&#10;            Tag tagIdeas = new Tag(&quot;Ideas&quot;);&#10;            Tag tagUrgente = new Tag(&quot;Urgente&quot;);&#10;&#10;            localRepository.saveTag(tagTrabajo);&#10;            localRepository.saveTag(tagPersonal);&#10;            localRepository.saveTag(tagImportante);&#10;            localRepository.saveTag(tagIdeas);&#10;            localRepository.saveTag(tagUrgente);&#10;            &#10;            listaEtiquetas = localRepository.getAllTags();&#10;        }&#10;        &#10;        // Crear notas de ejemplo si no existen&#10;        if (listaNotas.isEmpty()) {&#10;            Tag tagPersonal = getTagByDescription(&quot;Personal&quot;);&#10;            Tag tagIdeas = getTagByDescription(&quot;Ideas&quot;);&#10;            Tag tagImportante = getTagByDescription(&quot;Importante&quot;);&#10;            Tag tagTrabajo = getTagByDescription(&quot;Trabajo&quot;);&#10;            Tag tagUrgente = getTagByDescription(&quot;Urgente&quot;);&#10;&#10;            Note nota1 = new Note(0,&#10;                    &quot;Lista de compras&quot;,&#10;                    &quot;Leche, pan, huevos, arroz, pollo, verduras y frutas.&quot;,&#10;                    Arrays.asList(tagPersonal),&#10;                    true, false&#10;            );&#10;            &#10;            Note nota2 = new Note(0,&#10;                    &quot;Idea para proyecto&quot;,&#10;                    &quot;Crear una aplicación móvil para organizar tareas mediante inteligencia artificial.&quot;,&#10;                    Arrays.asList(tagIdeas, tagImportante),&#10;                    true, false&#10;            );&#10;            &#10;            Note nota3 = new Note(0,&#10;                    &quot;Cita médica&quot;,&#10;                    &quot;Cita con el doctor Ramírez el lunes 12 a las 9:00 a.m.&quot;,&#10;                    Arrays.asList(tagPersonal, tagImportante),&#10;                    true, false&#10;            );&#10;&#10;            localRepository.saveNote(nota1);&#10;            localRepository.saveNote(nota2);&#10;            localRepository.saveNote(nota3);&#10;            &#10;            listaNotas = localRepository.getAllNotes();&#10;        }&#10;    }&#10;    &#10;    private Tag getTagByDescription(String description) {&#10;        for (Tag tag : listaEtiquetas) {&#10;            if (tag.getEtiquetaDescripcion().equals(description)) {&#10;                return tag;&#10;            }&#10;        }&#10;        return new Tag(description);&#10;    }&#10;&#10;    public List&lt;Note&gt; getListaNotas() {&#10;        if (localRepository != null) {&#10;            listaNotas = localRepository.getAllNotes();&#10;        }&#10;        return listaNotas;&#10;    }&#10;&#10;    public void setListaNotas(List&lt;Note&gt; listaNotas) {&#10;        this.listaNotas = listaNotas;&#10;        // Guardar en SQLite&#10;        if (localRepository != null) {&#10;            for (Note note : listaNotas) {&#10;                localRepository.saveNote(note);&#10;            }&#10;        }&#10;    }&#10;&#10;    public List&lt;Tag&gt; getListaEtiquetas() {&#10;        if (localRepository != null) {&#10;            listaEtiquetas = localRepository.getAllTags();&#10;        }&#10;        return listaEtiquetas;&#10;    }&#10;&#10;    public void setListaEtiquetas(List&lt;Tag&gt; listaEtiquetas) {&#10;        this.listaEtiquetas = listaEtiquetas;&#10;        // Guardar en SQLite&#10;        if (localRepository != null) {&#10;            for (Tag tag : listaEtiquetas) {&#10;                localRepository.saveTag(tag);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Métodos para operaciones directas con SQLite&#10;    public void addNote(Note note) {&#10;        if (localRepository != null) {&#10;            localRepository.saveNote(note);&#10;            listaNotas = localRepository.getAllNotes();&#10;        }&#10;    }&#10;    &#10;    public void updateNote(Note note) {&#10;        if (localRepository != null) {&#10;            localRepository.saveNote(note);&#10;            listaNotas = localRepository.getAllNotes();&#10;        }&#10;    }&#10;    &#10;    public void deleteNote(int noteId) {&#10;        if (localRepository != null) {&#10;            localRepository.deleteNote(noteId);&#10;            listaNotas = localRepository.getAllNotes();&#10;        }&#10;    }&#10;    &#10;    public void moveNoteToTrash(int noteId) {&#10;        if (localRepository != null) {&#10;            localRepository.moveNoteToTrash(noteId);&#10;            listaNotas = localRepository.getAllNotes();&#10;        }&#10;    }&#10;    &#10;    public void addTag(Tag tag) {&#10;        if (localRepository != null) {&#10;            localRepository.saveTag(tag);&#10;            listaEtiquetas = localRepository.getAllTags();&#10;        }&#10;    }&#10;    &#10;    public LocalRepository getLocalRepository() {&#10;        return localRepository;&#10;    }&#10;&#10;    public static GenerarData getInstance() {&#10;        if (instancia == null) {&#10;            instancia = new GenerarData();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public static GenerarData getInstancia() {&#10;        if (instancia == null) {&#10;            instancia = new GenerarData();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public void loadFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        Set&lt;String&gt; favorites = prefs.getStringSet(FAVORITES_KEY, new HashSet&lt;&gt;());&#10;        &#10;        for (Tag tag : listaEtiquetas) {&#10;            String tagKey = tag.getEtiquetaDescripcion();&#10;            if (favorites.contains(tagKey)) {&#10;                long timestamp = prefs.getLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, System.currentTimeMillis());&#10;                tag.setFavorite(true);&#10;                tag.setFavoriteTimestamp(timestamp);&#10;            }&#10;        }&#10;        &#10;        sortTagsByFavorites();&#10;    }&#10;&#10;    private void sortTagsByFavorites() {&#10;        listaEtiquetas.sort((tag1, tag2) -&gt; {&#10;            if (tag1.isFavorite() &amp;&amp; !tag2.isFavorite()) {&#10;                return -1;&#10;            } else if (!tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return 1;&#10;            } else if (tag1.isFavorite() &amp;&amp; tag2.isFavorite()) {&#10;                return Long.compare(tag1.getFavoriteTimestamp(), tag2.getFavoriteTimestamp());&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;    }&#10;&#10;    public void saveFavorites(Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;&#10;        Set&lt;String&gt; favorites = new HashSet&lt;&gt;();&#10;        for (Tag tag : listaEtiquetas) {&#10;            if (tag.isFavorite()) {&#10;                String tagKey = tag.getEtiquetaDescripcion();&#10;                favorites.add(tagKey);&#10;                editor.putLong(TIMESTAMPS_KEY + &quot;_&quot; + tagKey, tag.getFavoriteTimestamp());&#10;            }&#10;        }&#10;&#10;        editor.putStringSet(FAVORITES_KEY, favorites);&#10;        editor.apply();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/Tag.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/Tag.java" />
              <option name="originalContent" value="package com.sgionotes.models;&#10;&#10;public class Tag {&#10;    private String etiquetaDescripcion;&#10;    private boolean isFavorite;&#10;    private long favoriteTimestamp;&#10;&#10;    public Tag(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;        this.isFavorite = false;&#10;        this.favoriteTimestamp = 0;&#10;    }&#10;&#10;    public String getEtiquetaDescripcion() {&#10;        return etiquetaDescripcion;&#10;    }&#10;&#10;    public void setEtiquetaDescripcion(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;    }&#10;&#10;    public boolean isFavorite() {&#10;        return isFavorite;&#10;    }&#10;&#10;    public void setFavorite(boolean favorite) {&#10;        this.isFavorite = favorite;&#10;        if (favorite) {&#10;            this.favoriteTimestamp = System.currentTimeMillis();&#10;        } else {&#10;            this.favoriteTimestamp = 0;&#10;        }&#10;    }&#10;&#10;    public long getFavoriteTimestamp() {&#10;        return favoriteTimestamp;&#10;    }&#10;&#10;    public String getDisplayText() {&#10;        return etiquetaDescripcion;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.models;&#10;&#10;public class Tag {&#10;    private String etiquetaDescripcion;&#10;    private boolean isFavorite;&#10;    private long favoriteTimestamp;&#10;&#10;    public Tag(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;        this.isFavorite = false;&#10;        this.favoriteTimestamp = 0;&#10;    }&#10;&#10;    public String getEtiquetaDescripcion() {&#10;        return etiquetaDescripcion;&#10;    }&#10;&#10;    public void setEtiquetaDescripcion(String etiquetaDescripcion) {&#10;        this.etiquetaDescripcion = etiquetaDescripcion;&#10;    }&#10;&#10;    public boolean isFavorite() {&#10;        return isFavorite;&#10;    }&#10;&#10;    public void setFavorite(boolean favorite) {&#10;        this.isFavorite = favorite;&#10;        if (favorite) {&#10;            this.favoriteTimestamp = System.currentTimeMillis();&#10;        } else {&#10;            this.favoriteTimestamp = 0;&#10;        }&#10;    }&#10;&#10;    public long getFavoriteTimestamp() {&#10;        return favoriteTimestamp;&#10;    }&#10;&#10;    public void setFavoriteTimestamp(long favoriteTimestamp) {&#10;        this.favoriteTimestamp = favoriteTimestamp;&#10;    }&#10;&#10;    public String getDisplayText() {&#10;        return etiquetaDescripcion;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/UserProfile.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/models/UserProfile.java" />
              <option name="updatedContent" value="package com.sgionotes.models;&#10;&#10;public class UserProfile {&#10;    private String nombres;&#10;    private String apellidos;&#10;    private String email;&#10;    private int profileIcon; // Resource ID del icono seleccionado&#10;    &#10;    public UserProfile() {&#10;        // Constructor vacío para Firebase&#10;    }&#10;    &#10;    public UserProfile(String nombres, String apellidos, String email, int profileIcon) {&#10;        this.nombres = nombres;&#10;        this.apellidos = apellidos;&#10;        this.email = email;&#10;        this.profileIcon = profileIcon;&#10;    }&#10;    &#10;    public String getNombres() {&#10;        return nombres;&#10;    }&#10;    &#10;    public void setNombres(String nombres) {&#10;        this.nombres = nombres;&#10;    }&#10;    &#10;    public String getApellidos() {&#10;        return apellidos;&#10;    }&#10;    &#10;    public void setApellidos(String apellidos) {&#10;        this.apellidos = apellidos;&#10;    }&#10;    &#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;    &#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;    &#10;    public int getProfileIcon() {&#10;        return profileIcon;&#10;    }&#10;    &#10;    public void setProfileIcon(int profileIcon) {&#10;        this.profileIcon = profileIcon;&#10;    }&#10;    &#10;    public String getFullName() {&#10;        return (nombres != null ? nombres : &quot;&quot;) + &quot; &quot; + (apellidos != null ? apellidos : &quot;&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/repository/FirestoreRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/repository/FirestoreRepository.java" />
              <option name="originalContent" value="package com.sgionotes.repository;&#10;&#10;import android.util.Log;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class FirestoreRepository {&#10;&#10;    private static final String TAG = &quot;FirestoreRepository&quot;;&#10;    private static final String COLLECTION_NOTES = &quot;notes&quot;;&#10;    private static final String COLLECTION_TAGS = &quot;tags&quot;;&#10;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth mAuth;&#10;&#10;    public FirestoreRepository() {&#10;        db = FirebaseFirestore.getInstance();&#10;        mAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    public interface DataLoadCallback {&#10;        void onSuccess();&#10;        void onError(String error);&#10;    }&#10;&#10;    public interface DataSaveCallback {&#10;        void onSuccess();&#10;        void onError(String error);&#10;    }&#10;&#10;    // Cargar todas las notas del usuario desde Firestore&#10;    public void loadUserNotes(DataLoadCallback callback) {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        if (user == null) {&#10;            callback.onError(&quot;Usuario no autenticado&quot;);&#10;            return;&#10;        }&#10;&#10;        String userId = user.getUid();&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_NOTES)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        List&lt;Note&gt; notes = new ArrayList&lt;&gt;();&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            Note note = documentToNote(document);&#10;                            if (note != null) {&#10;                                notes.add(note);&#10;                            }&#10;                        }&#10;                        generarData.setListaNotas(notes);&#10;                        Log.d(TAG, &quot;Notas cargadas: &quot; + notes.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al cargar notas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al cargar las notas&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    // Cargar todas las etiquetas del usuario desde Firestore&#10;    public void loadUserTags(DataLoadCallback callback) {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        if (user == null) {&#10;            callback.onError(&quot;Usuario no autenticado&quot;);&#10;            return;&#10;        }&#10;&#10;        String userId = user.getUid();&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;&#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_TAGS)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        List&lt;Tag&gt; tags = new ArrayList&lt;&gt;();&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            Tag tag = documentToTag(document);&#10;                            if (tag != null) {&#10;                                tags.add(tag);&#10;                            }&#10;                        }&#10;                        if (!tags.isEmpty()) {&#10;                            generarData.setListaEtiquetas(tags);&#10;                        }&#10;                        Log.d(TAG, &quot;Etiquetas cargadas: &quot; + tags.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al cargar etiquetas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al cargar las etiquetas&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    // Guardar todas las notas del usuario en Firestore&#10;    public void saveUserNotes(DataSaveCallback callback) {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        if (user == null) {&#10;            callback.onError(&quot;Usuario no autenticado&quot;);&#10;            return;&#10;        }&#10;&#10;        String userId = user.getUid();&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        List&lt;Note&gt; notes = generarData.getListaNotas();&#10;&#10;        // Primero eliminar todas las notas existentes, luego agregar las nuevas&#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_NOTES)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Eliminar notas existentes&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            document.getReference().delete();&#10;                        }&#10;&#10;                        // Agregar notas actuales&#10;                        for (Note note : notes) {&#10;                            Map&lt;String, Object&gt; noteData = noteToMap(note);&#10;                            db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_NOTES)&#10;                                    .add(noteData);&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Notas guardadas: &quot; + notes.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al guardar notas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al guardar las notas&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    // EtiquetasDeUsuarioFirestore&#10;    public void saveUserTags(DataSaveCallback callback) {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        if (user == null) {&#10;            callback.onError(&quot;Usuario no autenticado&quot;);&#10;            return;&#10;        }&#10;&#10;        String userId = user.getUid();&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        List&lt;Tag&gt; tags = generarData.getListaEtiquetas();&#10;&#10;&#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_TAGS)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            document.getReference().delete();&#10;                        }&#10;&#10;&#10;                        for (Tag tag : tags) {&#10;                            Map&lt;String, Object&gt; tagData = tagToMap(tag);&#10;                            db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_TAGS)&#10;                                    .add(tagData);&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Etiquetas guardadas: &quot; + tags.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al guardar etiquetas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al guardar las etiquetas&quot;);&#10;                    }&#10;                });&#10;    }&#10;&#10;    // ConvertirNoteMapParaFirestore&#10;    private Map&lt;String, Object&gt; noteToMap(Note note) {&#10;        Map&lt;String, Object&gt; noteData = new HashMap&lt;&gt;();&#10;        noteData.put(&quot;id&quot;, note.getId());&#10;        noteData.put(&quot;titulo&quot;, note.getTitulo());&#10;        noteData.put(&quot;contenido&quot;, note.getContenido());&#10;        noteData.put(&quot;isTrash&quot;, note.isTrash());&#10;&#10;        // ConvertirTagsListaDeStrings&#10;        List&lt;String&gt; tagNames = new ArrayList&lt;&gt;();&#10;        if (note.getEtiquetas() != null) {&#10;            for (Tag tag : note.getEtiquetas()) {&#10;                tagNames.add(tag.getEtiquetaDescripcion());&#10;            }&#10;        }&#10;        noteData.put(&quot;tags&quot;, tagNames);&#10;&#10;        return noteData;&#10;    }&#10;&#10;    // ConvertirMapFirestoreNote&#10;    private Note documentToNote(QueryDocumentSnapshot document) {&#10;        try {&#10;            Long id = document.getLong(&quot;id&quot;);&#10;            String titulo = document.getString(&quot;titulo&quot;);&#10;            String contenido = document.getString(&quot;contenido&quot;);&#10;            Boolean isTrash = document.getBoolean(&quot;isTrash&quot;);&#10;            List&lt;String&gt; tagNames = (List&lt;String&gt;) document.get(&quot;tags&quot;);&#10;&#10;            // CrearListaDeTags&#10;            List&lt;Tag&gt; tags = new ArrayList&lt;&gt;();&#10;            if (tagNames != null) {&#10;                for (String tagName : tagNames) {&#10;                    tags.add(new Tag(tagName));&#10;                }&#10;            }&#10;&#10;            return new Note(&#10;                id != null ? id.intValue() : 0,&#10;                titulo != null ? titulo : &quot;&quot;,&#10;                contenido != null ? contenido : &quot;&quot;,&#10;                tags,&#10;                false,&#10;                isTrash != null ? isTrash : false&#10;            );&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error al convertir documento a Note&quot;, e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    //TagMap&#10;    private Map&lt;String, Object&gt; tagToMap(Tag tag) {&#10;        Map&lt;String, Object&gt; tagData = new HashMap&lt;&gt;();&#10;        tagData.put(&quot;descripcion&quot;, tag.getEtiquetaDescripcion());&#10;        tagData.put(&quot;isFavorite&quot;, tag.isFavorite());&#10;        tagData.put(&quot;favoriteTimestamp&quot;, tag.getFavoriteTimestamp());&#10;        return tagData;&#10;    }&#10;&#10;    // FirestoreTagDesdeUnDocumento&#10;    private Tag documentToTag(QueryDocumentSnapshot document) {&#10;        try {&#10;            String descripcion = document.getString(&quot;descripcion&quot;);&#10;            Boolean isFavorite = document.getBoolean(&quot;isFavorite&quot;);&#10;            Long favoriteTimestamp = document.getLong(&quot;favoriteTimestamp&quot;);&#10;&#10;            Tag tag = new Tag(descripcion != null ? descripcion : &quot;&quot;);&#10;            tag.setFavorite(isFavorite != null ? isFavorite : false);&#10;            tag.setFavoriteTimestamp(favoriteTimestamp != null ? favoriteTimestamp : System.currentTimeMillis());&#10;&#10;            return tag;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error al convertir documento a Tag&quot;, e);&#10;            return null;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.repository;&#10;&#10;import android.content.Context;&#10;import android.util.Log;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.models.Tag;&#10;import com.sgionotes.models.GenerarData;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class FirestoreRepository {&#10;    &#10;    private static final String TAG = &quot;FirestoreRepository&quot;;&#10;    private static final String COLLECTION_NOTES = &quot;notes&quot;;&#10;    private static final String COLLECTION_TAGS = &quot;tags&quot;;&#10;    &#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth mAuth;&#10;    private Context context;&#10;    &#10;    public FirestoreRepository(Context context) {&#10;        this.context = context;&#10;        db = FirebaseFirestore.getInstance();&#10;        mAuth = FirebaseAuth.getInstance();&#10;    }&#10;    &#10;    public interface DataSyncCallback {&#10;        void onSuccess();&#10;        void onError(String error);&#10;    }&#10;    &#10;    // Sincronizar datos locales SQLite → Firestore (backup)&#10;    public void backupLocalDataToFirestore(DataSyncCallback callback) {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        if (user == null) {&#10;            callback.onError(&quot;Usuario no autenticado&quot;);&#10;            return;&#10;        }&#10;        &#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        LocalRepository localRepo = generarData.getLocalRepository();&#10;        &#10;        if (localRepo == null) {&#10;            callback.onError(&quot;Repository local no inicializado&quot;);&#10;            return;&#10;        }&#10;        &#10;        String userId = user.getUid();&#10;        &#10;        // Primero hacer backup de las etiquetas&#10;        backupTagsToFirestore(userId, localRepo, new DataSyncCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                // Luego hacer backup de las notas&#10;                backupNotesToFirestore(userId, localRepo, callback);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                callback.onError(&quot;Error al respaldar etiquetas: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;    &#10;    // Restaurar datos Firestore → SQLite local&#10;    public void restoreDataFromFirestore(DataSyncCallback callback) {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        if (user == null) {&#10;            callback.onError(&quot;Usuario no autenticado&quot;);&#10;            return;&#10;        }&#10;        &#10;        String userId = user.getUid();&#10;        &#10;        // Primero restaurar etiquetas, luego notas&#10;        restoreTagsFromFirestore(userId, new DataSyncCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                restoreNotesFromFirestore(userId, callback);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                callback.onError(&quot;Error al restaurar etiquetas: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void backupTagsToFirestore(String userId, LocalRepository localRepo, DataSyncCallback callback) {&#10;        List&lt;Tag&gt; tags = localRepo.getAllTags();&#10;        &#10;        // Eliminar etiquetas existentes en Firestore&#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_TAGS)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Eliminar etiquetas existentes&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            document.getReference().delete();&#10;                        }&#10;                        &#10;                        // Subir etiquetas actuales&#10;                        for (Tag tag : tags) {&#10;                            Map&lt;String, Object&gt; tagData = tagToMap(tag);&#10;                            db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_TAGS)&#10;                                    .add(tagData);&#10;                        }&#10;                        &#10;                        Log.d(TAG, &quot;Etiquetas respaldadas en Firestore: &quot; + tags.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al respaldar etiquetas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al respaldar etiquetas&quot;);&#10;                    }&#10;                });&#10;    }&#10;    &#10;    private void backupNotesToFirestore(String userId, LocalRepository localRepo, DataSyncCallback callback) {&#10;        List&lt;Note&gt; notes = localRepo.getAllNotes();&#10;        List&lt;Note&gt; trashNotes = localRepo.getTrashNotes();&#10;        &#10;        // Combinar notas normales y de papelera&#10;        List&lt;Note&gt; allNotes = new ArrayList&lt;&gt;(notes);&#10;        allNotes.addAll(trashNotes);&#10;        &#10;        // Eliminar notas existentes en Firestore&#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_NOTES)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Eliminar notas existentes&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            document.getReference().delete();&#10;                        }&#10;                        &#10;                        // Subir notas actuales&#10;                        for (Note note : allNotes) {&#10;                            Map&lt;String, Object&gt; noteData = noteToMap(note);&#10;                            db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_NOTES)&#10;                                    .add(noteData);&#10;                        }&#10;                        &#10;                        Log.d(TAG, &quot;Notas respaldadas en Firestore: &quot; + allNotes.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al respaldar notas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al respaldar notas&quot;);&#10;                    }&#10;                });&#10;    }&#10;    &#10;    private void restoreTagsFromFirestore(String userId, DataSyncCallback callback) {&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        LocalRepository localRepo = generarData.getLocalRepository();&#10;        &#10;        if (localRepo == null) {&#10;            callback.onError(&quot;Repository local no inicializado&quot;);&#10;            return;&#10;        }&#10;        &#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_TAGS)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        List&lt;Tag&gt; tags = new ArrayList&lt;&gt;();&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            Tag tag = documentToTag(document);&#10;                            if (tag != null) {&#10;                                tags.add(tag);&#10;                                localRepo.saveTag(tag); // Guardar en SQLite&#10;                            }&#10;                        }&#10;                        &#10;                        Log.d(TAG, &quot;Etiquetas restauradas desde Firestore: &quot; + tags.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al restaurar etiquetas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al restaurar etiquetas&quot;);&#10;                    }&#10;                });&#10;    }&#10;    &#10;    private void restoreNotesFromFirestore(String userId, DataSyncCallback callback) {&#10;        GenerarData generarData = GenerarData.getInstancia();&#10;        LocalRepository localRepo = generarData.getLocalRepository();&#10;        &#10;        if (localRepo == null) {&#10;            callback.onError(&quot;Repository local no inicializado&quot;);&#10;            return;&#10;        }&#10;        &#10;        db.collection(&quot;users&quot;).document(userId).collection(COLLECTION_NOTES)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        List&lt;Note&gt; notes = new ArrayList&lt;&gt;();&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            Note note = documentToNote(document);&#10;                            if (note != null) {&#10;                                notes.add(note);&#10;                                localRepo.saveNote(note); // Guardar en SQLite&#10;                            }&#10;                        }&#10;                        &#10;                        Log.d(TAG, &quot;Notas restauradas desde Firestore: &quot; + notes.size());&#10;                        callback.onSuccess();&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error al restaurar notas&quot;, task.getException());&#10;                        callback.onError(&quot;Error al restaurar notas&quot;);&#10;                    }&#10;                });&#10;    }&#10;    &#10;    // ConvertirNoteMapParaFirestore&#10;    private Map&lt;String, Object&gt; noteToMap(Note note) {&#10;        Map&lt;String, Object&gt; noteData = new HashMap&lt;&gt;();&#10;        noteData.put(&quot;id&quot;, note.getId());&#10;        noteData.put(&quot;titulo&quot;, note.getTitulo());&#10;        noteData.put(&quot;contenido&quot;, note.getContenido());&#10;        noteData.put(&quot;isTrash&quot;, note.isTrash());&#10;&#10;        // ConvertirTagsListaDeStrings&#10;        List&lt;String&gt; tagNames = new ArrayList&lt;&gt;();&#10;        if (note.getEtiquetas() != null) {&#10;            for (Tag tag : note.getEtiquetas()) {&#10;                tagNames.add(tag.getEtiquetaDescripcion());&#10;            }&#10;        }&#10;        noteData.put(&quot;tags&quot;, tagNames);&#10;&#10;        return noteData;&#10;    }&#10;&#10;    // ConvertirMapFirestoreNote&#10;    private Note documentToNote(QueryDocumentSnapshot document) {&#10;        try {&#10;            Long id = document.getLong(&quot;id&quot;);&#10;            String titulo = document.getString(&quot;titulo&quot;);&#10;            String contenido = document.getString(&quot;contenido&quot;);&#10;            Boolean isTrash = document.getBoolean(&quot;isTrash&quot;);&#10;            List&lt;String&gt; tagNames = (List&lt;String&gt;) document.get(&quot;tags&quot;);&#10;&#10;            // CrearListaDeTags&#10;            List&lt;Tag&gt; tags = new ArrayList&lt;&gt;();&#10;            if (tagNames != null) {&#10;                for (String tagName : tagNames) {&#10;                    tags.add(new Tag(tagName));&#10;                }&#10;            }&#10;&#10;            return new Note(&#10;                id != null ? id.intValue() : 0,&#10;                titulo != null ? titulo : &quot;&quot;,&#10;                contenido != null ? contenido : &quot;&quot;,&#10;                tags,&#10;                false,&#10;                isTrash != null ? isTrash : false&#10;            );&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error al convertir documento a Note&quot;, e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    //TagMap&#10;    private Map&lt;String, Object&gt; tagToMap(Tag tag) {&#10;        Map&lt;String, Object&gt; tagData = new HashMap&lt;&gt;();&#10;        tagData.put(&quot;descripcion&quot;, tag.getEtiquetaDescripcion());&#10;        tagData.put(&quot;isFavorite&quot;, tag.isFavorite());&#10;        tagData.put(&quot;favoriteTimestamp&quot;, tag.getFavoriteTimestamp());&#10;        return tagData;&#10;    }&#10;&#10;    // FirestoreTagDesdeUnDocumento&#10;    private Tag documentToTag(QueryDocumentSnapshot document) {&#10;        try {&#10;            String descripcion = document.getString(&quot;descripcion&quot;);&#10;            Boolean isFavorite = document.getBoolean(&quot;isFavorite&quot;);&#10;            Long favoriteTimestamp = document.getLong(&quot;favoriteTimestamp&quot;);&#10;&#10;            Tag tag = new Tag(descripcion != null ? descripcion : &quot;&quot;);&#10;            tag.setFavorite(isFavorite != null ? isFavorite : false);&#10;            tag.setFavoriteTimestamp(favoriteTimestamp != null ? favoriteTimestamp : System.currentTimeMillis());&#10;&#10;            return tag;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error al convertir documento a Tag&quot;, e);&#10;            return null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/repository/LocalRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/repository/LocalRepository.java" />
              <option name="updatedContent" value="package com.sgionotes.repository;&#10;&#10;import android.content.Context;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.google.gson.Gson;&#10;import com.google.gson.reflect.TypeToken;&#10;import com.sgionotes.database.AppDatabase;&#10;import com.sgionotes.database.dao.NoteDao;&#10;import com.sgionotes.database.dao.TagDao;&#10;import com.sgionotes.database.entities.NoteEntity;&#10;import com.sgionotes.database.entities.TagEntity;&#10;import com.sgionotes.models.Note;&#10;import com.sgionotes.models.Tag;&#10;&#10;import java.lang.reflect.Type;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class LocalRepository {&#10;    &#10;    private NoteDao noteDao;&#10;    private TagDao tagDao;&#10;    private FirebaseAuth mAuth;&#10;    private Gson gson;&#10;    &#10;    public LocalRepository(Context context) {&#10;        AppDatabase database = AppDatabase.getDatabase(context);&#10;        noteDao = database.noteDao();&#10;        tagDao = database.tagDao();&#10;        mAuth = FirebaseAuth.getInstance();&#10;        gson = new Gson();&#10;    }&#10;    &#10;    private String getCurrentUserId() {&#10;        FirebaseUser user = mAuth.getCurrentUser();&#10;        return user != null ? user.getUid() : null;&#10;    }&#10;    &#10;    // ==================== OPERACIONES DE NOTAS ====================&#10;    &#10;    public List&lt;Note&gt; getAllNotes() {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return new ArrayList&lt;&gt;();&#10;        &#10;        List&lt;NoteEntity&gt; entities = noteDao.getAllNotesByUser(userId);&#10;        return convertNotesToModels(entities);&#10;    }&#10;    &#10;    public List&lt;Note&gt; getTrashNotes() {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return new ArrayList&lt;&gt;();&#10;        &#10;        List&lt;NoteEntity&gt; entities = noteDao.getTrashNotesByUser(userId);&#10;        return convertNotesToModels(entities);&#10;    }&#10;    &#10;    public Note getNoteById(int noteId) {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return null;&#10;        &#10;        NoteEntity entity = noteDao.getNoteById(noteId, userId);&#10;        return entity != null ? convertNoteToModel(entity) : null;&#10;    }&#10;    &#10;    public long saveNote(Note note) {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return -1;&#10;        &#10;        NoteEntity entity = convertNoteToEntity(note, userId);&#10;        &#10;        if (note.getId() == 0) {&#10;            // Nueva nota&#10;            return noteDao.insertNote(entity);&#10;        } else {&#10;            // Actualizar nota existente&#10;            entity.setId(note.getId());&#10;            noteDao.updateNote(entity);&#10;            return note.getId();&#10;        }&#10;    }&#10;    &#10;    public void moveNoteToTrash(int noteId) {&#10;        String userId = getCurrentUserId();&#10;        if (userId != null) {&#10;            noteDao.moveToTrash(noteId, userId, System.currentTimeMillis());&#10;        }&#10;    }&#10;    &#10;    public void restoreNoteFromTrash(int noteId) {&#10;        String userId = getCurrentUserId();&#10;        if (userId != null) {&#10;            noteDao.restoreFromTrash(noteId, userId, System.currentTimeMillis());&#10;        }&#10;    }&#10;    &#10;    public void deleteNote(int noteId) {&#10;        String userId = getCurrentUserId();&#10;        if (userId != null) {&#10;            NoteEntity entity = noteDao.getNoteById(noteId, userId);&#10;            if (entity != null) {&#10;                noteDao.deleteNote(entity);&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void emptyTrash() {&#10;        String userId = getCurrentUserId();&#10;        if (userId != null) {&#10;            noteDao.emptyTrash(userId);&#10;        }&#10;    }&#10;    &#10;    // ==================== OPERACIONES DE ETIQUETAS ====================&#10;    &#10;    public List&lt;Tag&gt; getAllTags() {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return new ArrayList&lt;&gt;();&#10;        &#10;        List&lt;TagEntity&gt; entities = tagDao.getAllTagsByUser(userId);&#10;        return convertTagsToModels(entities);&#10;    }&#10;    &#10;    public List&lt;Tag&gt; getFavoriteTags() {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return new ArrayList&lt;&gt;();&#10;        &#10;        List&lt;TagEntity&gt; entities = tagDao.getFavoriteTagsByUser(userId);&#10;        return convertTagsToModels(entities);&#10;    }&#10;    &#10;    public Tag getTagById(int tagId) {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return null;&#10;        &#10;        TagEntity entity = tagDao.getTagById(tagId, userId);&#10;        return entity != null ? convertTagToModel(entity) : null;&#10;    }&#10;    &#10;    public Tag getTagByDescription(String description) {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return null;&#10;        &#10;        TagEntity entity = tagDao.getTagByDescription(description, userId);&#10;        return entity != null ? convertTagToModel(entity) : null;&#10;    }&#10;    &#10;    public long saveTag(Tag tag) {&#10;        String userId = getCurrentUserId();&#10;        if (userId == null) return -1;&#10;        &#10;        TagEntity entity = convertTagToEntity(tag, userId);&#10;        &#10;        // Verificar si ya existe una etiqueta con esa descripción&#10;        if (tagDao.tagExists(tag.getEtiquetaDescripcion(), userId)) {&#10;            TagEntity existing = tagDao.getTagByDescription(tag.getEtiquetaDescripcion(), userId);&#10;            if (existing != null) {&#10;                existing.setFavorite(tag.isFavorite());&#10;                existing.setFavoriteTimestamp(tag.getFavoriteTimestamp());&#10;                tagDao.updateTag(existing);&#10;                return existing.getId();&#10;            }&#10;        }&#10;        &#10;        return tagDao.insertTag(entity);&#10;    }&#10;    &#10;    public void deleteTag(int tagId) {&#10;        String userId = getCurrentUserId();&#10;        if (userId != null) {&#10;            TagEntity entity = tagDao.getTagById(tagId, userId);&#10;            if (entity != null) {&#10;                tagDao.deleteTag(entity);&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void setTagFavorite(int tagId, boolean isFavorite) {&#10;        String userId = getCurrentUserId();&#10;        if (userId != null) {&#10;            long timestamp = isFavorite ? System.currentTimeMillis() : 0;&#10;            tagDao.setFavorite(tagId, userId, isFavorite, timestamp);&#10;        }&#10;    }&#10;    &#10;    // ==================== MÉTODOS DE CONVERSIÓN ====================&#10;    &#10;    private List&lt;Note&gt; convertNotesToModels(List&lt;NoteEntity&gt; entities) {&#10;        List&lt;Note&gt; notes = new ArrayList&lt;&gt;();&#10;        for (NoteEntity entity : entities) {&#10;            notes.add(convertNoteToModel(entity));&#10;        }&#10;        return notes;&#10;    }&#10;    &#10;    private Note convertNoteToModel(NoteEntity entity) {&#10;        List&lt;Tag&gt; tags = new ArrayList&lt;&gt;();&#10;        if (entity.getTags() != null &amp;&amp; !entity.getTags().isEmpty()) {&#10;            Type listType = new TypeToken&lt;List&lt;String&gt;&gt;(){}.getType();&#10;            List&lt;String&gt; tagNames = gson.fromJson(entity.getTags(), listType);&#10;            for (String tagName : tagNames) {&#10;                tags.add(new Tag(tagName));&#10;            }&#10;        }&#10;        &#10;        Note note = new Note(&#10;            entity.getId(),&#10;            entity.getTitulo() != null ? entity.getTitulo() : &quot;&quot;,&#10;            entity.getContenido() != null ? entity.getContenido() : &quot;&quot;,&#10;            tags,&#10;            false, // cortarContenido&#10;            entity.isTrash()&#10;        );&#10;        &#10;        return note;&#10;    }&#10;    &#10;    private NoteEntity convertNoteToEntity(Note note, String userId) {&#10;        List&lt;String&gt; tagNames = new ArrayList&lt;&gt;();&#10;        if (note.getEtiquetas() != null) {&#10;            for (Tag tag : note.getEtiquetas()) {&#10;                tagNames.add(tag.getEtiquetaDescripcion());&#10;            }&#10;        }&#10;        &#10;        String tagsJson = gson.toJson(tagNames);&#10;        &#10;        NoteEntity entity = new NoteEntity(&#10;            note.getTitulo(),&#10;            note.getContenido(),&#10;            tagsJson,&#10;            note.isTrash(),&#10;            userId&#10;        );&#10;        &#10;        return entity;&#10;    }&#10;    &#10;    private List&lt;Tag&gt; convertTagsToModels(List&lt;TagEntity&gt; entities) {&#10;        List&lt;Tag&gt; tags = new ArrayList&lt;&gt;();&#10;        for (TagEntity entity : entities) {&#10;            tags.add(convertTagToModel(entity));&#10;        }&#10;        return tags;&#10;    }&#10;    &#10;    private Tag convertTagToModel(TagEntity entity) {&#10;        Tag tag = new Tag(entity.getDescripcion());&#10;        tag.setFavorite(entity.isFavorite());&#10;        tag.setFavoriteTimestamp(entity.getFavoriteTimestamp());&#10;        return tag;&#10;    }&#10;    &#10;    private TagEntity convertTagToEntity(Tag tag, String userId) {&#10;        TagEntity entity = new TagEntity(tag.getEtiquetaDescripcion(), userId);&#10;        entity.setFavorite(tag.isFavorite());&#10;        entity.setFavoriteTimestamp(tag.getFavoriteTimestamp());&#10;        return entity;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sgionotes/utils/UserProfileManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sgionotes/utils/UserProfileManager.java" />
              <option name="originalContent" value="package com.sgionotes.utils;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.UserProfile;&#10;&#10;public class UserProfileManager {&#10;&#10;    private static final String PREFS_NAME = &quot;user_profile&quot;;&#10;    private static final String KEY_NOMBRES = &quot;nombres&quot;;&#10;    private static final String KEY_APELLIDOS = &quot;apellidos&quot;;&#10;    private static final String KEY_EMAIL = &quot;email&quot;;&#10;    private static final String KEY_PROFILE_ICON = &quot;profile_icon&quot;;&#10;&#10;    private SharedPreferences prefs;&#10;    private SharedPreferences.Editor editor;&#10;&#10;    // Iconos de usuario disponibles (usando solo Material Icons oficiales)&#10;    public static final int[] PROFILE_ICONS = {&#10;        android.R.drawable.ic_menu_myplaces,        // Ubicación/Personal&#10;        android.R.drawable.ic_menu_recent_history,   // Historial/Experiencia&#10;        android.R.drawable.ic_menu_preferences,      // Configuración/Técnico&#10;        android.R.drawable.ic_menu_info_details,     // Información/Académico&#10;        android.R.drawable.ic_menu_manage,           // Gestión/Profesional&#10;        android.R.drawable.ic_menu_camera,           // Creatividad/Arte&#10;        android.R.drawable.ic_menu_gallery,          // Galería/Visual&#10;        android.R.drawable.ic_menu_compass           // Exploración/Aventura&#10;    };&#10;&#10;    public UserProfileManager(Context context) {&#10;        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        editor = prefs.edit();&#10;    }&#10;&#10;    public void saveUserProfile(UserProfile profile) {&#10;        editor.putString(KEY_NOMBRES, profile.getNombres());&#10;        editor.putString(KEY_APELLIDOS, profile.getApellidos());&#10;        editor.putString(KEY_EMAIL, profile.getEmail());&#10;        editor.putInt(KEY_PROFILE_ICON, profile.getProfileIcon());&#10;        editor.apply();&#10;    }&#10;&#10;    public UserProfile getUserProfile() {&#10;        String nombres = prefs.getString(KEY_NOMBRES, &quot;Usuario&quot;);&#10;        String apellidos = prefs.getString(KEY_APELLIDOS, &quot;&quot;);&#10;        String email = prefs.getString(KEY_EMAIL, &quot;&quot;);&#10;        int profileIcon = prefs.getInt(KEY_PROFILE_ICON, R.drawable.outline_account_circle_24);&#10;&#10;        return new UserProfile(nombres, apellidos, email, profileIcon);&#10;    }&#10;&#10;    public void clearUserProfile() {&#10;        editor.clear();&#10;        editor.apply();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sgionotes.utils;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import com.sgionotes.R;&#10;import com.sgionotes.models.UserProfile;&#10;&#10;public class UserProfileManager {&#10;&#10;    private static final String PREFS_NAME = &quot;user_profile&quot;;&#10;    private static final String KEY_NOMBRES = &quot;nombres&quot;;&#10;    private static final String KEY_APELLIDOS = &quot;apellidos&quot;;&#10;    private static final String KEY_EMAIL = &quot;email&quot;;&#10;    private static final String KEY_PROFILE_ICON = &quot;profile_icon&quot;;&#10;&#10;    private SharedPreferences prefs;&#10;    private SharedPreferences.Editor editor;&#10;&#10;    // Iconos de usuario disponibles (Material Icons de Google Fonts que representan usuarios)&#10;    public static final int[] PROFILE_ICONS = {&#10;        R.drawable.ic_person_24,          // Person - Usuario estándar (DEFAULT)&#10;        R.drawable.ic_school_24,          // School - Estudiante/Académico&#10;        R.drawable.ic_group_24,           // Group - Trabajo en equipo&#10;        R.drawable.ic_pets_24,            // Pets - Amante de animales&#10;        R.drawable.ic_event_note_24,      // EventNote - Organizador/Planner&#10;        R.drawable.ic_artist_24,          // Artist - Creativo/Artístico&#10;        R.drawable.ic_nature_24,          // Nature - Amante naturaleza&#10;        R.drawable.ic_my_location_24,     // My Location - Viajero/Ubicación&#10;        R.drawable.ic_motorcycle_24       // Motorcycle - Aventurero&#10;    };&#10;&#10;    public UserProfileManager(Context context) {&#10;        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        editor = prefs.edit();&#10;    }&#10;&#10;    public void saveUserProfile(UserProfile profile) {&#10;        editor.putString(KEY_NOMBRES, profile.getNombres());&#10;        editor.putString(KEY_APELLIDOS, profile.getApellidos());&#10;        editor.putString(KEY_EMAIL, profile.getEmail());&#10;        editor.putInt(KEY_PROFILE_ICON, profile.getProfileIcon());&#10;        editor.apply();&#10;    }&#10;&#10;    public UserProfile getUserProfile() {&#10;        String nombres = prefs.getString(KEY_NOMBRES, &quot;Usuario&quot;);&#10;        String apellidos = prefs.getString(KEY_APELLIDOS, &quot;&quot;);&#10;        String email = prefs.getString(KEY_EMAIL, &quot;&quot;);&#10;        int profileIcon = prefs.getInt(KEY_PROFILE_ICON, R.drawable.outline_account_circle_24);&#10;&#10;        return new UserProfile(nombres, apellidos, email, profileIcon);&#10;    }&#10;&#10;    public void clearUserProfile() {&#10;        editor.clear();&#10;        editor.apply();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable-night/circle_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable-night/circle_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondary&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;?attr/colorOnSecondary&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondary&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;?attr/colorOnSecondary&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/primary&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@android:color/white&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_light.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_light.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/primary&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@android:color/white&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/edit_icon_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/edit_icon_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#80FFFFFF&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@android:color/white&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_artist_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_artist_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2l3.09,6.26L22,9.27l-5,4.87 1.18,6.88L12,17.77l-6.18,3.25L7,14.14 2,9.27l6.91,-1.01L12,2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_chevron_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_chevron_right.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/textColor&quot;&#10;        android:pathData=&quot;M8.59,16.59L13.17,12L8.59,7.41L10,6l6,6l-6,6L8.59,16.59z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_event_note_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_event_note_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M17,12h-5v5h5v-5zM16,1v2H8V1H6v2H5c-1.11,0 -1.99,0.9 -1.99,2L3,19c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2h-1V1h-2zM19,19H5V8h14v11z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_group_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_group_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M16,4c0,-1.11 0.89,-2 2,-2s2,0.89 2,2 -0.89,2 -2,2 -2,-0.89 -2,-2zM20,22v-6h2.5l-2.54,-7.63c-0.34,-1.02 -1.28,-1.74 -2.46,-1.74s-2.12,0.72 -2.46,1.74L12.5,16H15v6h5zM12.5,11.5c0.83,0 1.5,-0.67 1.5,-1.5s-0.67,-1.5 -1.5,-1.5S11,9.17 11,10s0.67,1.5 1.5,1.5zM5.5,6c1.11,0 2,-0.89 2,-2S6.61,2 5.5,2 3.5,2.89 3.5,4s0.89,2 2,2zM7.5,22v-7H9V9.5c0,-1.1 -0.9,-2 -2,-2h-3c-1.1,0 -2,0.9 -2,2V15h1.5v7H7.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_motorcycle_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_motorcycle_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19.44,9.03L15.41,5H11v2h3.59l2,2H5c-2.8,0 -5,2.2 -5,5s2.2,5 5,5c2.46,0 4.45,-1.69 4.9,-4h1.65l2.77-2.77c-0.21,0.54 -0.32,1.14 -0.32,1.77 0,2.8 2.2,5 5,5s5,-2.2 5,-5c0,-2.65 -1.97,-4.77 -4.56,-4.97zM7.82,15C7.4,16.15 6.28,17 5,17c-1.63,0 -3,-1.37 -3,-3s1.37,-3 3,-3c1.28,0 2.4,0.85 2.82,2H5v2h2.82zM19,17c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_my_location_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_my_location_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2c-3.87,0 -7,3.13 -7,7 0,5.25 7,13 7,13s7,-7.75 7,-13c0,-3.87 -3.13,-7 -7,-7zM12,11.5c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5 2.5,1.12 2.5,2.5 -1.12,2.5 -2.5,2.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_nature_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_nature_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M14,6l-3.75,5 2.85,3.8 -1.6,1.2C9.81,13.75 7,10 7,10l-6,8h22L14,6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_person_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_person_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_pets_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_pets_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M4.5,9.5C3.12,9.5 2,8.38 2,7s1.12,-2.5 2.5,-2.5S7,5.62 7,7 5.88,9.5 4.5,9.5zM9,10l3,-3 3,3v9l-3,-3 -3,3V10zM18.5,9.5C17.12,9.5 16,8.38 16,7s1.12,-2.5 2.5,-2.5S21,5.62 21,7 19.88,9.5 18.5,9.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_avatar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_avatar.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,5c1.66,0 3,1.34 3,3s-1.34,3 -3,3 -3,-1.34 -3,-3 1.34,-3 3,-3zM12,19.2c-2.5,0 -4.71,-1.28 -6,-3.22 0.03,-1.99 4,-3.08 6,-3.08 1.99,0 5.97,1.09 6,3.08 -1.29,1.94 -3.5,3.22 -6,3.22z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_businessman.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_businessman.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C13.1,2 14,2.9 14,4C14,5.1 13.1,6 12,6C10.9,6 10,5.1 10,4C10,2.9 10.9,2 12,2ZM21,9V7L15,7V9C15,11.8 12.8,14 10,14V16C14.4,16 18,12.4 18,8H21ZM5,12C3.9,12 3,12.9 3,14V22H5V12ZM12,7C14.21,7 16,8.79 16,11S14.21,15 12,15S8,13.21 8,11S9.79,7 12,7Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_creative.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_creative.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C11.1,2 10.29,2.37 9.68,2.95L9.61,3.02C8.85,3.78 8.85,4.99 9.61,5.75L10.39,6.53C10.78,6.92 11.37,7.08 11.94,6.95L12,7C14.21,7 16,8.79 16,11S14.21,15 12,15S8,13.21 8,11C8,9.9 8.37,8.9 9,8.15L9,8C9,6.9 8.1,6 7,6S5,6.9 5,8V16C5,17.1 5.9,18 7,18H17C18.1,18 19,17.1 19,16V8C19,6.9 18.1,6 17,6S15,6.9 15,8C15,8.37 15.1,8.71 15.27,9H12C10.9,9 10,8.1 10,7S10.9,5 12,5S14,5.9 14,7H16C16,4.79 14.21,3 12,3Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_happy.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_happy.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z&quot;/&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M15,5c0.83,0 1.5,0.67 1.5,1.5S15.83,8 15,8s-1.5,-0.67 -1.5,-1.5S14.17,5 15,5zM9,5c0.83,0 1.5,0.67 1.5,1.5S9.83,8 9,8s-1.5,-0.67 -1.5,-1.5S8.17,5 9,5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_professional.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_professional.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C17.52,2 22,6.48 22,12C22,17.52 17.52,22 12,22C6.48,22 2,17.52 2,12C2,6.48 6.48,2 12,2ZM12,6C10.34,6 9,7.34 9,9C9,10.66 10.34,12 12,12C13.66,12 15,10.66 15,9C15,7.34 13.66,6 12,6ZM12,20C14.67,20 17.01,18.34 17.82,15.9C17.79,14.16 14.5,13.2 12,13.2C9.5,13.2 6.21,14.16 6.18,15.9C6.99,18.34 9.33,20 12,20Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_student.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_student.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C14.21,2 16,3.79 16,6C16,8.21 14.21,10 12,10C9.79,10 8,8.21 8,6C8,3.79 9.79,2 12,2ZM12,12C16.42,12 20,13.79 20,16V18C20,19.1 19.1,20 18,20H6C4.9,20 4,19.1 4,18V16C4,13.79 7.58,12 12,12Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_team.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile_team.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;48dp&quot;&#10;    android:height=&quot;48dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M16,4c0,-1.11 0.89,-2 2,-2s2,0.89 2,2 -0.89,2 -2,2 -2,-0.89 -2,-2zM20,22v-6h2.5l-2.54,-7.63c-0.34,-1.02 -1.28,-1.74 -2.46,-1.74s-2.12,0.72 -2.46,1.74L12.5,16H15v6h5zM12.5,11.5c0.83,0 1.5,-0.67 1.5,-1.5s-0.67,-1.5 -1.5,-1.5S11,9.17 11,10s0.67,1.5 1.5,1.5zM5.5,6c1.11,0 2,-0.89 2,-2S6.61,2 5.5,2 3.5,2.89 3.5,4s0.89,2 2,2zM7.5,22v-7H9V9.5c0,-1.1 -0.9,-2 -2,-2h-3c-1.1,0 -2,0.9 -2,2V15h1.5v7H7.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_school_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_school_24.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M5,13.18v4L12,21l7,-3.82v-4L12,17l-7,-3.82zM12,3L1,9l11,6 9,-4.91V17h2V9L12,3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_star_outline.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_star_outline.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/transparent&quot;&#10;        android:strokeColor=&quot;@color/alternateColor&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineJoin=&quot;round&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M12,2l3.09,6.26L22,9.27l-5,4.87L18.18,22L12,18.8L5.82,22L7,14.14L2,9.27l6.91-1.01L12,2Z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_1.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_1.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_2.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_2.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C13.1,2 14,2.9 14,4C14,5.1 13.1,6 12,6C10.9,6 10,5.1 10,4C10,2.9 10.9,2 12,2ZM21,9V7L15,7V9C15,11.8 12.8,14 10,14V16C14.4,16 18,12.4 18,8H21ZM15,12V22H17V12H15ZM5,12C3.9,12 3,12.9 3,14V22H5V12Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_3.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_3.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2c1.1,0 2,0.9 2,2s-0.9,2 -2,2 -2,-0.9 -2,-2 0.9,-2 2,-2zM12,20c-4.42,0 -8,-3.58 -8,-8 0,-1.85 0.63,-3.55 1.69,-4.9l1.43,1.43c-0.69,0.9 -1.12,2.02 -1.12,3.47 0,2.76 2.24,5 5,5s5,-2.24 5,-5c0,-1.45 -0.43,-2.57 -1.12,-3.47l1.43,-1.43c1.06,1.35 1.69,3.05 1.69,4.9 0,4.42 -3.58,8 -8,8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_4.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_user_4.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,5c1.66,0 3,1.34 3,3s-1.34,3 -3,3 -3,-1.34 -3,-3 1.34,-3 3,-3zM12,19.2c-2.5,0 -4.71,-1.28 -6,-3.22 0.03,-1.99 4,-3.08 6,-3.08 1.99,0 5.97,1.09 6,3.08 -1.29,1.94 -3.5,3.22 -6,3.22z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/outline_tag_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/outline_tag_24.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/transparent&quot;&#10;        android:strokeColor=&quot;@color/alternateColor&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineJoin=&quot;round&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M20.59,13.41l-7.17,7.17a2,2 0,0 1,-2.83 0L2,12V2H12l8.59,8.59A2,2 0,0 1,20.59 13.41Z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/transparent&quot;&#10;        android:strokeColor=&quot;@color/alternateColor&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineJoin=&quot;round&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M7,7h0.01&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/popupMenuBackgroundColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;?attr/popupMenuStrokeColor&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_simple.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_simple.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;@android:color/white&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#CCCCCC&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_themed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/popup_menu_background_themed.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/cardColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/startGradient&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/cardColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/alternateColor&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/tag_item_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/tag_item_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;?attr/chipBackgroundColor&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;?attr/chipStrokeColor&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout-night/drawer_header.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout-night/drawer_header.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:padding=&quot;20dp&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    style=&quot;@style/SCREEN&quot;&#10;    android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:id=&quot;@+id/cardProfileIcon&quot;&#10;        android:layout_width=&quot;75dp&quot;&#10;        android:layout_height=&quot;75dp&quot;&#10;        app:cardCornerRadius=&quot;40dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&#10;        app:cardBackgroundColor=&quot;?attr/colorSecondary&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgProfileIcon&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:src=&quot;@drawable/outline_account_circle_24&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            app:tint=&quot;?attr/colorOnSecondary&quot;/&gt;&#10;&#10;        &lt;!-- Icono de editar centrado con fondo transparente blanco --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgEditIcon&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_edit_24&quot;&#10;            android:background=&quot;@drawable/edit_icon_background&quot;&#10;            android:padding=&quot;6dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:tint=&quot;@android:color/white&quot;/&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserName&quot;&#10;        android:layout_marginTop=&quot;10dp&quot;&#10;        android:layout_marginBottom=&quot;5dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;15sp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserEmail&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:layout_marginBottom=&quot;10dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:padding=&quot;20dp&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    style=&quot;@style/SCREEN&quot;&#10;    android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:id=&quot;@+id/cardProfileIcon&quot;&#10;        android:layout_width=&quot;75dp&quot;&#10;        android:layout_height=&quot;75dp&quot;&#10;        app:cardCornerRadius=&quot;40dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&#10;        app:cardBackgroundColor=&quot;?attr/colorSecondary&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgProfileIcon&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:src=&quot;@drawable/outline_account_circle_24&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            app:tint=&quot;?attr/colorOnSecondary&quot;/&gt;&#10;&#10;        &lt;!-- Icono de editar centrado con fondo transparente blanco --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgEditIcon&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_edit_24&quot;&#10;            android:background=&quot;@drawable/edit_icon_background&quot;&#10;            android:padding=&quot;6dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:tint=&quot;@android:color/white&quot;/&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserName&quot;&#10;        android:layout_marginTop=&quot;10dp&quot;&#10;        android:layout_marginBottom=&quot;5dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;15sp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserEmail&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:layout_marginBottom=&quot;10dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout-night/item_profile_icon.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout-night/item_profile_icon.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;80dp&quot;&#10;    android:layout_height=&quot;80dp&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    android:layout_gravity=&quot;center&quot;&#10;    app:cardCornerRadius=&quot;40dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    app:cardBackgroundColor=&quot;?attr/colorSecondary&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imgProfileIcon&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:scaleType=&quot;centerInside&quot;&#10;        android:padding=&quot;0dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        app:tint=&quot;?attr/colorOnSecondary&quot;&#10;        android:alpha=&quot;1.0&quot; /&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;80dp&quot;&#10;    android:layout_height=&quot;80dp&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    android:layout_gravity=&quot;center&quot;&#10;    app:cardCornerRadius=&quot;40dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    app:cardBackgroundColor=&quot;?attr/colorSecondary&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imgProfileIcon&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:scaleType=&quot;centerInside&quot;&#10;        android:padding=&quot;3dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        app:tint=&quot;?attr/colorOnSecondary&quot;&#10;        android:alpha=&quot;1.0&quot; /&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_profile_icons.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_profile_icons.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;32dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerProfileIcons&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;24dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:minHeight=&quot;350dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerProfileIcons&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:overScrollMode=&quot;never&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/drawer_header.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/drawer_header.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:padding=&quot;20dp&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    style=&quot;@style/SCREEN&quot;&#10;    android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:id=&quot;@+id/cardProfileIcon&quot;&#10;        android:layout_width=&quot;75dp&quot;&#10;        android:layout_height=&quot;75dp&quot;&#10;        app:cardCornerRadius=&quot;40dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&#10;        app:cardBackgroundColor=&quot;@color/primary&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgProfileIcon&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:src=&quot;@drawable/outline_account_circle_24&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            app:tint=&quot;@android:color/white&quot;/&gt;&#10;&#10;        &lt;!-- Icono de editar centrado con fondo transparente blanco --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgEditIcon&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_edit_24&quot;&#10;            android:background=&quot;@drawable/edit_icon_background&quot;&#10;            android:padding=&quot;6dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:tint=&quot;@android:color/white&quot;/&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserName&quot;&#10;        android:layout_marginTop=&quot;10dp&quot;&#10;        android:layout_marginBottom=&quot;5dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;15sp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserEmail&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:layout_marginBottom=&quot;10dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:padding=&quot;20dp&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    style=&quot;@style/SCREEN&quot;&#10;    android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:id=&quot;@+id/cardProfileIcon&quot;&#10;        android:layout_width=&quot;75dp&quot;&#10;        android:layout_height=&quot;75dp&quot;&#10;        app:cardCornerRadius=&quot;40dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&#10;        app:cardBackgroundColor=&quot;@color/primary&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgProfileIcon&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:src=&quot;@drawable/outline_account_circle_24&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            app:tint=&quot;@android:color/white&quot;/&gt;&#10;&#10;        &lt;!-- Icono de editar centrado con fondo transparente blanco --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgEditIcon&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_edit_24&quot;&#10;            android:background=&quot;@drawable/edit_icon_background&quot;&#10;            android:padding=&quot;6dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:tint=&quot;@android:color/white&quot;/&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserName&quot;&#10;        android:layout_marginTop=&quot;10dp&quot;&#10;        android:layout_marginBottom=&quot;5dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;15sp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txtUserEmail&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        style=&quot;@style/TEXT&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:layout_marginBottom=&quot;10dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_tag.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_tag.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.fragments.TagFragment&quot;&gt;&#10;&#10;    &lt;View&#10;        android:layout_marginStart=&quot;10dp&quot;&#10;        android:layout_marginEnd=&quot;10dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:layout_marginTop=&quot;2dp&quot;&#10;        android:layout_marginBottom=&quot;2dp&quot;&#10;        android:background=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;    &lt;include layout=&quot;@layout/layout_tag_add&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_marginStart=&quot;10dp&quot;&#10;        android:layout_marginEnd=&quot;10dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:layout_marginTop=&quot;2dp&quot;&#10;        android:layout_marginBottom=&quot;2dp&quot;&#10;        android:background=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerTags&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.fragments.TagFragment&quot;&gt;&#10;&#10;    &lt;include layout=&quot;@layout/layout_tag_add&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerTags&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_profile_icon.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_profile_icon.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;80dp&quot;&#10;    android:layout_height=&quot;80dp&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    android:layout_gravity=&quot;center&quot;&#10;    app:cardCornerRadius=&quot;40dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    app:cardBackgroundColor=&quot;@color/primary&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imgProfileIcon&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:scaleType=&quot;centerInside&quot;&#10;        android:padding=&quot;0dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        app:tint=&quot;@android:color/white&quot;&#10;        android:alpha=&quot;1.0&quot; /&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;80dp&quot;&#10;    android:layout_height=&quot;80dp&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    android:layout_gravity=&quot;center&quot;&#10;    app:cardCornerRadius=&quot;40dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    app:cardBackgroundColor=&quot;@color/primary&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imgProfileIcon&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:scaleType=&quot;centerInside&quot;&#10;        android:padding=&quot;3dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        app:tint=&quot;@android:color/white&quot;&#10;        android:alpha=&quot;1.0&quot; /&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_tag_editable.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_tag_editable.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;10dp&quot;&#10;    card_view:cardCornerRadius=&quot;10dp&quot;&#10;    card_view:cardElevation=&quot;5dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/cardColor&quot;&#10;        android:padding=&quot;10dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivTagIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:src=&quot;@drawable/outline_tag_24&quot; /&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivFavoriteIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:src=&quot;@drawable/ic_star_outline&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etTagText&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:focusableInTouchMode=&quot;false&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:maxLines=&quot;1&quot;&#10;            style=&quot;@style/TEXT&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnMore&quot;&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:src=&quot;@drawable/ic_chevron_right&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:contentDescription=&quot;Mas opciones&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;10dp&quot;&#10;    card_view:cardCornerRadius=&quot;10dp&quot;&#10;    card_view:cardElevation=&quot;5dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/cardColor&quot;&#10;        android:padding=&quot;10dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivTagIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:src=&quot;@drawable/outline_tag_24&quot; /&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivFavoriteIcon&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:src=&quot;@drawable/ic_star_outline&quot;&#10;                app:tint=&quot;@color/alternateColor&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etTagText&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:focusableInTouchMode=&quot;false&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:maxLines=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            style=&quot;@style/TEXT&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnMore&quot;&#10;            android:layout_width=&quot;30dp&quot;&#10;            android:layout_height=&quot;30dp&quot;&#10;            android:src=&quot;@drawable/ic_chevron_right&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:layout_marginEnd=&quot;4dp&quot;&#10;            android:contentDescription=&quot;Mas opciones&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;alias(libs.plugins.android.application) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    id 'com.google.gms.google-services' version '4.4.0' apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>